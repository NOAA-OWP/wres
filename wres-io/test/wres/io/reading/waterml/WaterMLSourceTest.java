package wres.io.reading.waterml;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static wres.io.reading.DataSource.DataDisposition.JSON_WATERML;

import wres.config.generated.DataSourceConfig;
import wres.datamodel.time.TimeSeries;
import wres.io.reading.DataSource;

public class WaterMLSourceTest
{
    // Use the Jackson deserializer from the outer WaterMLBasicSource class.
    private static final ObjectMapper OBJECT_MAPPER = WaterMLBasicSource.OBJECT_MAPPER;
    private DataSource fakeSource;
    private Response fakeResponse;

    @BeforeEach
    public void setup() throws JsonProcessingException
    {
        DataSourceConfig.Source fakeDeclarationSource =
                new DataSourceConfig.Source( null,
                                             null,
                                             null,
                                             null,
                                             null );
        fakeSource = DataSource.of( JSON_WATERML,
                                    fakeDeclarationSource,
                                    new DataSourceConfig( null,
                                                          List.of( fakeDeclarationSource ),
                                                          null,
                                                          null,
                                                          null,
                                                          null,
                                                          null,
                                                          null,
                                                          null,
                                                          null,
                                                          null ),
                                    Collections.emptySet(),
                                    URI.create( "https://fake.uri/somewhere" ) );
        String jsonResponse =
                "{\n"
                + "  \"name\": \"ns1:timeSeriesResponseType\",\n"
                + "  \"declaredType\": \"org.cuahsi.waterml.TimeSeriesResponseType\",\n"
                + "  \"scope\": \"javax.xml.bind.JAXBElement$GlobalScope\",\n"
                + "  \"value\": {\n"
                + "    \"queryInfo\": {\n"
                + "      \"queryURL\": \"http://nwis.waterservices.usgs.gov/nwis/ivendDT=2020-10-09T22%3A00%3A00Z&format=json&parameterCd=00060&sites=03272700%2C03280700&startDT=2020-10-09T01%3A00%3A01Z\",\n"
                + "      \"criteria\": {\n"
                + "        \"locationParam\": \"[ALL:03272700, ALL:03280700]\",\n"
                + "        \"variableParam\": \"[00060]\",\n"
                + "        \"timeParam\": {\n"
                + "          \"beginDateTime\": \"2020-10-09T01:00:01.000\",\n"
                + "          \"endDateTime\": \"2020-10-09T22:00:00.000\"\n"
                + "        },\n"
                + "        \"parameter\": []\n"
                + "      },\n"
                + "      \"note\": [\n"
                + "        {\n"
                + "          \"value\": \"[ALL:03272700, ALL:03280700]\",\n"
                + "          \"title\": \"filter:sites\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"[mode=RANGE, modifiedSince=null] interval={INTERVAL[2020-10-09T01:00:01.000Z/2020-10-09T22:00:00.000Z]}\",\n"
                + "          \"title\": \"filter:timeRange\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"methodIds=[ALL]\",\n"
                + "          \"title\": \"filter:methodId\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"2021-01-29T16:22:32.874Z\",\n"
                + "          \"title\": \"requestDT\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"30afc990-624e-11eb-acf5-4cd98f86fad9\",\n"
                + "          \"title\": \"requestId\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"Provisional data are subject to revision. Go to http://waterdata.usgs.gov/nwis/help/?provisional for more information.\",\n"
                + "          \"title\": \"disclaimer\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"value\": \"nadww02\",\n"
                + "          \"title\": \"server\"\n"
                + "        }\n"
                + "      ]\n"
                + "    },\n"
                + "    \"timeSeries\": [\n"
                + "      {\n"
                + "        \"sourceInfo\": {\n"
                + "          \"siteName\": \"Sevenmile Creek at Camden OH\",\n"
                + "          \"siteCode\": [\n"
                + "            {\n"
                + "              \"value\": \"03272700\",\n"
                + "              \"network\": \"NWIS\",\n"
                + "              \"agencyCode\": \"USGS\"\n"
                + "            }\n"
                + "          ],\n"
                + "          \"timeZoneInfo\": {\n"
                + "            \"defaultTimeZone\": {\n"
                + "              \"zoneOffset\": \"-05:00\",\n"
                + "              \"zoneAbbreviation\": \"EST\"\n"
                + "            },\n"
                + "            \"daylightSavingsTimeZone\": {\n"
                + "              \"zoneOffset\": \"-04:00\",\n"
                + "              \"zoneAbbreviation\": \"EDT\"\n"
                + "            },\n"
                + "            \"siteUsesDaylightSavingsTime\": true\n"
                + "          },\n"
                + "          \"geoLocation\": {\n"
                + "            \"geogLocation\": {\n"
                + "              \"srs\": \"EPSG:4326\",\n"
                + "              \"latitude\": 39.6292196,\n"
                + "              \"longitude\": -84.6443964\n"
                + "            },\n"
                + "            \"localSiteXY\": []\n"
                + "          },\n"
                + "          \"note\": [],\n"
                + "          \"siteType\": [],\n"
                + "          \"siteProperty\": [\n"
                + "            {\n"
                + "              \"value\": \"ST\",\n"
                + "              \"name\": \"siteTypeCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"05080002\",\n"
                + "              \"name\": \"hucCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"39\",\n"
                + "              \"name\": \"stateCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"39135\",\n"
                + "              \"name\": \"countyCd\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"variable\": {\n"
                + "          \"variableCode\": [\n"
                + "            {\n"
                + "              \"value\": \"00060\",\n"
                + "              \"network\": \"NWIS\",\n"
                + "              \"vocabulary\": \"NWIS:UnitValues\",\n"
                + "              \"variableID\": 45807197,\n"
                + "              \"default\": true\n"
                + "            }\n"
                + "          ],\n"
                + "          \"variableName\": \"Streamflow, ft&#179;/s\",\n"
                + "          \"variableDescription\": \"Discharge, cubic feet per second\",\n"
                + "          \"valueType\": \"Derived Value\",\n"
                + "          \"unit\": {\n"
                + "            \"unitCode\": \"ft3/s\"\n"
                + "          },\n"
                + "          \"options\": {\n"
                + "            \"option\": [\n"
                + "              {\n"
                + "                \"name\": \"Statistic\",\n"
                + "                \"optionCode\": \"00000\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"note\": [],\n"
                + "          \"noDataValue\": -999999,\n"
                + "          \"variableProperty\": [],\n"
                + "          \"oid\": \"45807197\"\n"
                + "        },\n"
                + "        \"values\": [\n"
                + "          {\n"
                + "            \"value\": [\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T20:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T20:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T20:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T21:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T21:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T21:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T21:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T22:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T22:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T22:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T22:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T23:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T23:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T23:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.22\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-08T23:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T00:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T00:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T00:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T00:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T01:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.15\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T01:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T01:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T01:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T02:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T02:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T02:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T02:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T03:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T03:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T03:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T03:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.14\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T04:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T04:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T04:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T04:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T05:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T05:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T05:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.13\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T05:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.20\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T06:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.20\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T06:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.20\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T06:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T06:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T07:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T07:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T07:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T07:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T08:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T08:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T08:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T08:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.19\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T09:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T09:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T09:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T09:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.25\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T10:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.25\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T10:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.25\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T10:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.25\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T10:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.25\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T11:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T11:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T11:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.18\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T11:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.17\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T12:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.17\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T12:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T12:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.17\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T12:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T13:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T13:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.17\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T13:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T13:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T14:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T14:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T14:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.24\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T14:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T15:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T15:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.23\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T15:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T15:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T16:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T16:15:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T16:30:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T16:45:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"1.16\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T17:00:00.000-04:00\"\n"
                + "              }\n"
                + "            ],\n"
                + "            \"qualifier\": [\n"
                + "              {\n"
                + "                \"qualifierCode\": \"P\",\n"
                + "                \"qualifierDescription\": \"Provisional data subject to revision.\",\n"
                + "                \"qualifierID\": 0,\n"
                + "                \"network\": \"NWIS\",\n"
                + "                \"vocabulary\": \"uv_rmk_cd\"\n"
                + "              }\n"
                + "            ],\n"
                + "            \"qualityControlLevel\": [],\n"
                + "            \"method\": [\n"
                + "              {\n"
                + "                \"methodDescription\": \"\",\n"
                + "                \"methodID\": 110552\n"
                + "              }\n"
                + "            ],\n"
                + "            \"source\": [],\n"
                + "            \"offset\": [],\n"
                + "            \"sample\": [],\n"
                + "            \"censorCode\": []\n"
                + "          }\n"
                + "        ],\n"
                + "        \"name\": \"USGS:03272700:00060:00000\"\n"
                + "      },\n"
                + "      {\n"
                + "        \"sourceInfo\": {\n"
                + "          \"siteName\": \"CUTSHIN CREEK AT WOOTON, KY\",\n"
                + "          \"siteCode\": [\n"
                + "            {\n"
                + "              \"value\": \"03280700\",\n"
                + "              \"network\": \"NWIS\",\n"
                + "              \"agencyCode\": \"USGS\"\n"
                + "            }\n"
                + "          ],\n"
                + "          \"timeZoneInfo\": {\n"
                + "            \"defaultTimeZone\": {\n"
                + "              \"zoneOffset\": \"-05:00\",\n"
                + "              \"zoneAbbreviation\": \"EST\"\n"
                + "            },\n"
                + "            \"daylightSavingsTimeZone\": {\n"
                + "              \"zoneOffset\": \"-04:00\",\n"
                + "              \"zoneAbbreviation\": \"EDT\"\n"
                + "            },\n"
                + "            \"siteUsesDaylightSavingsTime\": true\n"
                + "          },\n"
                + "          \"geoLocation\": {\n"
                + "            \"geogLocation\": {\n"
                + "              \"srs\": \"EPSG:4326\",\n"
                + "              \"latitude\": 37.1650931,\n"
                + "              \"longitude\": -83.3079564\n"
                + "            },\n"
                + "            \"localSiteXY\": []\n"
                + "          },\n"
                + "          \"note\": [],\n"
                + "          \"siteType\": [],\n"
                + "          \"siteProperty\": [\n"
                + "            {\n"
                + "              \"value\": \"ST\",\n"
                + "              \"name\": \"siteTypeCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"05100202\",\n"
                + "              \"name\": \"hucCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"21\",\n"
                + "              \"name\": \"stateCd\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"value\": \"21131\",\n"
                + "              \"name\": \"countyCd\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"variable\": {\n"
                + "          \"variableCode\": [\n"
                + "            {\n"
                + "              \"value\": \"00060\",\n"
                + "              \"network\": \"NWIS\",\n"
                + "              \"vocabulary\": \"NWIS:UnitValues\",\n"
                + "              \"variableID\": 45807197,\n"
                + "              \"default\": true\n"
                + "            }\n"
                + "          ],\n"
                + "          \"variableName\": \"Streamflow, ft&#179;/s\",\n"
                + "          \"variableDescription\": \"Discharge, cubic feet per second\",\n"
                + "          \"valueType\": \"Derived Value\",\n"
                + "          \"unit\": {\n"
                + "            \"unitCode\": \"ft3/s\"\n"
                + "          },\n"
                + "          \"options\": {\n"
                + "            \"option\": [\n"
                + "              {\n"
                + "                \"name\": \"Statistic\",\n"
                + "                \"optionCode\": \"00000\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"note\": [],\n"
                + "          \"noDataValue\": -999999,\n"
                + "          \"variableProperty\": [],\n"
                + "          \"oid\": \"45807197\"\n"
                + "        },\n"
                + "        \"values\": [\n"
                + "          {\n"
                + "            \"value\": [\n"
                + "              {\n"
                + "                \"value\": \"8.04\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\",\n"
                + "                  \"e\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T05:00:00.000-04:00\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"value\": \"10.6\",\n"
                + "                \"qualifiers\": [\n"
                + "                  \"P\",\n"
                + "                  \"e\"\n"
                + "                ],\n"
                + "                \"dateTime\": \"2020-10-09T17:00:00.000-04:00\"\n"
                + "              }\n"
                + "            ],\n"
                + "            \"qualifier\": [\n"
                + "              {\n"
                + "                \"qualifierCode\": \"e\",\n"
                + "                \"qualifierDescription\": \"Value has been estimated.\",\n"
                + "                \"qualifierID\": 0,\n"
                + "                \"network\": \"NWIS\",\n"
                + "                \"vocabulary\": \"uv_rmk_cd\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"qualifierCode\": \"P\",\n"
                + "                \"qualifierDescription\": \"Provisional data subject to revision.\",\n"
                + "                \"qualifierID\": 1,\n"
                + "                \"network\": \"NWIS\",\n"
                + "                \"vocabulary\": \"uv_rmk_cd\"\n"
                + "              }\n"
                + "            ],\n"
                + "            \"qualityControlLevel\": [],\n"
                + "            \"method\": [\n"
                + "              {\n"
                + "                \"methodDescription\": \"\",\n"
                + "                \"methodID\": 59903\n"
                + "              }\n"
                + "            ],\n"
                + "            \"source\": [],\n"
                + "            \"offset\": [],\n"
                + "            \"sample\": [],\n"
                + "            \"censorCode\": []\n"
                + "          }\n"
                + "        ],\n"
                + "        \"name\": \"USGS:03280700:00060:00000\"\n"
                + "      }\n"
                + "    ]\n"
                + "  },\n"
                + "  \"nil\": false,\n"
                + "  \"globalScope\": true,\n"
                + "  \"typeSubstituted\": false\n"
                + "}";

        this.fakeResponse = OBJECT_MAPPER.readValue( jsonResponse, Response.class );
    }

    @Test
    public void twoObservationSeriesAreTranslatedWithMetadata()
    {
        WaterMLSource source = new WaterMLSource( this.fakeSource,
                                                  this.fakeResponse );
        List<TimeSeries<Double>> translated = source.call();
        assertEquals( 2, translated.size(),
                      "Expected two timeseries." );
        assertAll( () -> assertNotNull( translated.get( 0 )
                                                  .getMetadata(),
                                        "Expected the first timeseries to have metadata." ),
                   () -> assertNotNull( translated.get( 1 )
                                                  .getMetadata(),
                                        "Expected the second timeseries to have metadata." ),
                   () -> assertEquals( 84, translated.get( 0 )
                                                     .getEvents()
                                                     .size(),
                                       "Expected the first timeseries to have 84 values." ),
                   () -> assertEquals( 2, translated.get( 1 )
                                                    .getEvents()
                                                    .size(),
                                       "Expected the second timeseries to have 2 values." ) );
    }
}

// This build.gradle is released along with gradle wrapper inside a separate
// integration tests zip. The idea is to defer or make optional the run of
// these integration tests that rely on external services, to better
// distinguish these tests from WRES system tests, because these are only
// partially testing WRES functionality, mostly testing service availability
// and external service API changes. Unlike the systests distribution that
// requires an argument of which WRES version to test, this distribution has
// everything it needs to run. It will update when there are newer versions
// of the jars at WRES build time. So this should be self-contained, just
// run it.

// In order to get the test framework software (e.g. junit):
repositories
{
    mavenCentral()
}

apply plugin: 'java'

// The target Java version for declaration via a gradle toolchain
def final TARGET_JDK = 17

java
{
     // Declare the Java version, self-contained to the build
    toolchain 
    {
        languageVersion = JavaLanguageVersion.of( TARGET_JDK )
    }
}

dependencies
{
    testImplementation fileTree( dir: 'lib', include: '*.jar' )
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testRuntimeOnly files( 'lib/conf' )
}

test
{
    // Don't forget the magic word for JUnit 5:
    useJUnitPlatform()
    maxHeapSize = "128m" 

    // Pass through the expected path to the WRDS CA cert
    if( project.hasProperty( 'wres.wrdsCertificateFileToTrust') )
    {
        systemProperty "wres.wrdsCertificateFileToTrust", project.getProperty( 'wres.wrdsCertificateFileToTrust' );
    }
    else
    {
        println( "WARNING: failed to discover the gradle system property wres.wrdsCertificateFileToTrust." )
    }

    testLogging
    {
        showStandardStreams = true
    }
}

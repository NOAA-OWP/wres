import java.util.concurrent.TimeUnit;
import java.security.MessageDigest;

// This build.gradle is released along with gradle wrapper inside a system tests
// zip, such that the user of the zip may use gradle to compile and run system
// tests against a given version of WRES. The goal is to follow the "build your
// binaries once" from a given commit. The goal is also to allow developers to
// run these tests locally when they have the entire source tree available.
// There is intentionally no main java source code, it is all tests. The reason
// for putting it under "test" is to align with tools that expect tests to be
// under "test", such as junit or jacoco under gradle.

// In order to get the test framework software (e.g. junit):
repositories
{
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'jacoco'

// The default value of the versionToTest will be picked up from
// gradle.properties file. versionToTest can be overridden at gradle run time
// by using -PversionToTest=[version] on the gradle command line. The same is
// true for wresZipDirectory, which is the directory to find the zip ein.

// This task takes the software under test (a wres zip) and extracts it
task( unzipArtifactToTest, type: Copy, group: 'test' )
{
    description = 'Unzips the wres zip artifact to be tested.'

    def artifactName = "wres-${versionToTest}.zip"
    def zipFile = file( "${wresZipDirectory}/" + artifactName )
    def outputDir = file( "${buildDir}" )

    println( "buildDir: ${buildDir}" )
    println( "wresZipDirectory: " + wresZipDirectory )
    println( "zipFile: " + zipFile )
    println( "outputDir: " + outputDir )

    byte[] binaryContent = zipFile.bytes
    MessageDigest digest = MessageDigest.getInstance( "SHA-256" );
    byte[] hashbytes = digest.digest( binaryContent )
    String shaHex = bytesToHex( hashbytes );
    println( "Artifact " + artifactName + " has a SHA-256 of: " + shaHex )

    from zipTree(zipFile)
    into outputDir
}

// To compile the test java code, we need the artifact libs
compileTestJava.dependsOn( unzipArtifactToTest )

// This task unzips a graphics client artifact, after the main artifact has been unzipped
task( unzipGraphicsArtifactToTest, dependsOn: unzipArtifactToTest, type: Copy, group: 'test' )
{
    description = 'Unzips the wres graphics zip artifact to be tested.'
    def artifactName = "wres-vis-${graphicsVersionToTest}.zip"
    def zipFile = file( "${wresGraphicsZipDirectory}/" + artifactName )

    def outputDir = file( "${buildDir}" )

    println( "wresGraphicsZipDirectory: " + wresGraphicsZipDirectory )
    println( "graphicsZipFile: " + zipFile )
    println( "outputDir: " + outputDir )

    byte[] binaryContent = zipFile.bytes
    MessageDigest digest = MessageDigest.getInstance( "SHA-256" );
    byte[] hashbytes = digest.digest( binaryContent )
    String shaHex = bytesToHex( hashbytes );
    println( "Graphics artifact "+ artifactName + " has a SHA-256 of: " + shaHex )

    from zipTree(zipFile)
    into outputDir
}

// Converts a byte array to a hex string 
private String bytesToHex( byte[] hash ) {
    StringBuilder hexString = new StringBuilder( 2 * hash.length );
    for ( int i = 0; i < hash.length; i++ ) 
    {
        String hex = Integer.toHexString( 0xff & hash[i] );
        if( hex.length() == 1 ) 
        {
            hexString.append( '0' );
        }
        hexString.append( hex );
    }
    return hexString.toString();
}

// The graphics process to destroy on completion of the test task
Process graphicsProcess = null;

// This task starts a graphics client
task( startGraphicsClient, dependsOn: unzipGraphicsArtifactToTest, group: 'test' )
{
    def fS = System.getProperty( "file.separator" )
    def graphicsBin = "${buildDir}" + fS + "wres-vis-${graphicsVersionToTest}" + fS + "bin" + fS + "wres-vis"

    if( isWindows() )
    {
       graphicsBin = graphicsBin + ".bat"
    }

    doLast
    {
        // Pass on any java options
        def testJvmPropertiesGraphicsRaw = project.properties['testJvmSystemPropertiesGraphics']

        ProcessBuilder pb = new ProcessBuilder( graphicsBin );
        pb.environment()
          .put( "JAVA_OPTS", testJvmPropertiesGraphicsRaw );

        println( "Starting graphics client ${graphicsVersionToTest} with JAVA_OPTS=${testJvmPropertiesGraphicsRaw}" )
        println( "Graphics client start script: " + graphicsBin )

        // Redirect output to a log file
        File logFile = new File( project.buildDir, "wres-graphics-${graphicsVersionToTest}.log" )

        println( "Writing a log for the test task graphics to " + logFile )

        graphicsProcess = pb.redirectErrorStream( true )
                            .redirectInput( ProcessBuilder.Redirect.INHERIT )
                            .redirectOutput( ProcessBuilder.Redirect.to( logFile ) )
                            .start();

        // Cannot proceed without a graphics client
        if( ! graphicsProcess.isAlive() )
        {
            throw new GradleException( "Unable to instantiate a graphics client for the test task." )
        }

        // Do not wait for the graphics client to end
        println( "Graphics client has started." )
    }
}

// This task stops a graphics client
task( stopGraphicsClient, group: 'test' )
{
    doLast
    {
        if( graphicsProcess != null )
        {
            println( "Stopping graphics client ${graphicsVersionToTest}." )

            // Destroy the children and then the parent
            for( nextChild in graphicsProcess.children() )
            {
                nextChild.destroy()
            }

            graphicsProcess.destroy()
            graphicsProcess.waitFor( 5, TimeUnit.SECONDS )

            // Still alive? Mdk
            if( graphicsProcess.isAlive() )
            {
                for( nextChild in graphicsProcess.children() )
                {
                    nextChild.destroyForcibly()
                }

                graphicsProcess.destroyForcibly()
            }

            println( "Graphics client has stopped." )
        }
    }
}

// Start the graphics client before all tests
test.dependsOn( startGraphicsClient )

// Stop the graphics client after all tests
test.finalizedBy( stopGraphicsClient )

// Windows OS?
boolean isWindows()
{
    return System.properties['os.name'].toLowerCase().contains( 'windows' );
}

dependencies
{
    testCompile 'commons-io:commons-io:2.11.0'
    testCompile 'com.google.guava:guava-testlib:31.1-jre'
    testCompile 'com.google.guava:guava:31.1-jre'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:4.3.1'
    testCompile 'org.slf4j:slf4j-api:1.8.0-beta2'

    // Expose all wres contents here, using unzipArtifactToTest task.
    // Use of fileTree is important, lazily evaluated, meaning that the contents
    // from the unzipArtifactToTest task will be here by now
    testCompile fileTree( dir: "${unzipArtifactToTest.destinationDir}/wres-${versionToTest}/lib",
                          include: '*.jar' )

    // Add the lib/conf directory to testRuntime classpath like actual WRES does
    testRuntime files( "${unzipArtifactToTest.destinationDir}/wres-${versionToTest}/lib/conf" )

    println( "buildDir: ${buildDir}" )
    println( "versionToTest: ${versionToTest}" )
    println( "unzipArtifactToTest.destinationDir: " + unzipArtifactToTest.destinationDir )
}

test
{
    // Jump through some hoops to allow caller to set test JVM system properties
    // in one variable, like this:
    // -PtestJvmSystemProperties="-Dwres.useSSL=false -Dwres.blah=true"
    // or like this:
    // -PtestJvmSystemProperties="wres.useSSL=false wres.blah=true"
    jvmArgs += '-XX:+HeapDumpOnOutOfMemoryError'
    def now = Instant.now()
                     .toString()
                     .replace( '-', '_' )
                     .replace( ':', '_' );
    jvmArgs += "-XX:StartFlightRecording=settings=${unzipArtifactToTest.destinationDir}/wres-${versionToTest}/lib/conf/wres_jfr.jfc,maxsize=128m,dumponexit=true,filename=systests_${versionToTest}_${now}.jfr"
    jvmArgs += '-XX:FlightRecorderOptions=repository=.'

    // See #95586, use CMS until Java 16+ and use ZGC when switching to that.
    jvmArgs += '-XX:+UseConcMarkSweepGC'
    minHeapSize = "512m"
    maxHeapSize = "512m"
    // No longer necessary to fork on every test: see #61206
    // forkEvery=1
    def testJvmPropertiesRaw = project.properties['testJvmSystemProperties']
    def splittedTestJvmProperties = testJvmPropertiesRaw.trim().split( " " )
    println( "Test JVM System Properties split: ${splittedTestJvmProperties}" )
    def furtherSplittedTestJvmProperties = [:]
    def lastSysProp = ""

    // Without the findall, a seemingly empty array still evaluates the "each"
    splittedTestJvmProperties.findAll().each{ s ->
        if ( s.startsWith( "-D" ) )
        {
            def noPrefix = s.substring( 2 )
            def pair = noPrefix.split( "=", 2 )
            furtherSplittedTestJvmProperties[pair[0]] = pair[1]
            lastSysProp = pair[0]
        }
        else if ( s.startsWith( "-" ) )
        {
            jvmArgs += s
        }
        else
        {
            // Assume that another word after a space was meant to be applied
            // to the previously-started system property. This helps with H2
            // when setting the wres.databaseJdbcUrl string with spaces.
            furtherSplittedTestJvmProperties[lastSysProp] = furtherSplittedTestJvmProperties[lastSysProp] + " " + s
        }
    }

    systemProperties += [ "user.timezone": "UTC" ]
    println( "Test JVM System Properties to be applied: ${furtherSplittedTestJvmProperties}" )
    systemProperties += furtherSplittedTestJvmProperties
    println( "Test JVM Minimum Heap: ${minHeapSize}" )
    println( "Test JVM Maximum Heap: ${maxHeapSize}" )
    println( "Test JVM Args: ${jvmArgs}" )
    println( "Test JVM System Properties: ${systemProperties}" )

    jacoco
    {
        includes = [ "wres.*" ]
    }
}

jacocoTestReport
{
    reports
    {
        classDirectories.setFrom( fileTree( dir: buildDir,
                                                 include: "wres-*/lib/wres*.jar" ) )
        // jacoco still does not see the sources despite this following line.
        sourceDirectories.setFrom( fileTree( dir: buildDir,
                                             include: "wres-*/src/*.jar" ) )
        xml.enabled false
        csv.enabled true
        html.enabled true
    }

    // The list of jars is found else this would not print it successfully.
    doLast { println( classDirectories.asList() ) }
    doLast { println( sourceDirectories.asList() ) }
}

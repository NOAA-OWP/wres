plugins
{
    // for ability to use git ids for versioning jar files:
    id 'org.ajoberstar.grgit' version '1.7.2'
}

apply plugin: 'distribution'

// Each module does not need a version update unless code in it has changed.
def gitCommit = grgit.log(paths: [project.name], maxCommits:1).find()
def gitCommitId = gitCommit.id
def gitCommitDate = gitCommit.getDate()

def gitIsClean = grgit.status().isClean()

version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6]
if (!gitIsClean)
{
    version = version + '-dev'
}

distributions
{
    main
    {
        contents
        {
            from('.')
            {
                include '*.sh'
                include 'scenario*/after.sh'
                include 'scenario*/before.sh'
                include 'scenario*/*.xml'
                include 'scenario*/*.csv'
                include 'scenario*/CLEAN'
                include 'scenario*/FAILS'
                include 'scenario*/benchmarks/**'
                include 'smalldata/**'
                include 'scripts/*'
				include 'smalldata_test/**'
				include 'template/**'
				include 'thresholds/**'
                exclude 'scenario*/output'
            }

            // JUnit (integration) tests to be run after unzipping and scripts:
            from('dist')
            {
                include 'build.gradle'
                include 'settings.gradle'
                include 'gradle.properties'
                include 'src/test/java/**'
				include '*.bash'
				include 'template' 
				include 'scenario501'
				include 'thresholds'
				include 'smalldata_test'
            }

            // Gradle software itself
            from('..')
            {
                include 'gradlew'
                include 'gradlew.bat'
                include 'gradle/wrapper/*'
            }
        }
    }
}

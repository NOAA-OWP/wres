syntax = "proto3";

package wres.statistics.generated;

import "google/protobuf/timestamp.proto";

option java_package = "wres.statistics.generated";
option java_outer_classname = "EvaluationStatusProto";
option java_multiple_files = true;

message EvaluationStatus
{
    /*A message that encapsulates the status of an evaluation that has been 
    started. An evaluation identifier is required to connect an EvaluationStatus 
    message to an Evaluation message. It is assumed that this identifier is 
    packaged with the protocol; it is not provided inband. An EvaluationStatus 
    message may record some or all of the EvaluationStatusEvent associated with 
    an evaluation at the point of request. For example, it may record only those 
    "new" events surfaced since the last request.*/

    google.protobuf.Timestamp evaluation_start_time = 1;
    // The evaluation start time.
    
    google.protobuf.Timestamp evaluation_end_time = 2;
    // The evaluation end time.
    
    enum CompletionStatus
    {
        // Captures the status of an evaluation that has been started.
        
    	UNKNOWN = 0;
    	ONGOING = 1;
    	COMPLETE_REPORTED_SUCCESS = 2;
    	COMPLETE_REPORTED_FAILURE = 3;

        GROUP_COMPLETE_REPORTED_SUCCESS = 4;
        // A message group has been completed. The group identifier is assumed 
        // to be part of the metadata associated with the messaging protocol.
    }
    
    CompletionStatus completion_status = 3;
    
    repeated EvaluationStatusEvent status_events = 4;
    // Zero or more caller-facing status events.
    
    int64 message_count = 5;
    // Number of statistics messages that were published, plus one (for the 
    // evaluation message description that accompanies every evaluation). This 
    // is the expected number of messages a client consumer should receive. 
    // Always set when the completion status indicates that a stage has been 
    // completed.

    int64 status_message_count = 6;
    // Number of evaluation status messages (like this one) that were published, 
    // where applicable. This is the expected number of messages a client 
    // consumer should receive. Always set when the completion status indicates 
    // that an evaluation has been completed.

    int32 pairs_message_count = 7;
    // The number of pairs messages that were published, where applicable. This 
    // is the expected number of messages a client consumer should receive.

    int32 group_count = 8;
    // The number of groups within the evaluation.

    message EvaluationStatusEvent
    {
        /*A message that encapsulates an evaluation status event, such as a 
        warning to a user.*/
        
        enum StatusMessageType
        {
            // The type or severity of evaluation status message.
                   
            UNDEFINED = 0;
            // Undefined status.
            
            ERROR = 1;
            // An event that represents an error.
            
            WARN = 2;
            // An event that represents a warning.
                    
            INFO = 3;
            // A neutral information message.
            
            DEBUG = 4;
            /*An event that represents a detailed level of caller-facing 
            information, as distinct from developer-facing/logging.*/
        }
        
        StatusMessageType event_type = 1;

        string event_message = 2;
    }
}
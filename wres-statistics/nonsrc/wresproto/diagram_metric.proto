syntax = "proto3";

package wres.statistics.generated;

import "wresproto/metric_name.proto";

option java_package = "wres.statistics.generated";
option java_outer_classname = "DiagramMetricProto";
option java_multiple_files = true;

message DiagramMetric
{
    /*A message that encapsulates a diagram metric, such as a reliability 
    diagram.*/

    MetricName name = 1;    
    /*Metric name. For example, if the diagram is the reliability diagram, 
    which includes a sharpness plot, then the metric name is the reliability 
    diagram and the metric has three DiagramMetricComponent, one for the 
    forecast probability, one for the observed relative frequency and one for 
    the sample size or sharpness, where the observed relative frequency and
    the sample size are both measured against forecast probability.*/

    repeated DiagramMetricComponent components = 2;
    // Zero or more diagram components. In general, the description of the 
    // diagram metric component should be inband to the corresponding diagram 
    // statistic component, but there is the option to provide a complete, 
    // standalone, description of a metric here, independent of any statistics.
    
    bool has_diagonal = 3;
    // Is true if the diagram contains a diaogonal line, false otherwise.

    MetricName statistic_name = 4;
    // If this diagram is summarizing a distribution of raw statistics, this 
    // field contains the name of the raw metric being summarized. For 
    // example, if the mean error is calculated across geographic features and 
    // its distribution is summarized with a histogram, then the metric in this 
    // context is the mean error.

    MetricName statistic_component_name = 5;
    // The name of the metric component being summarized.

    string statistic_units = 6;
    // The units of the metric being summarized.

    double statistic_optimum = 7; 
    // Optimum value of the metric being summarized.
    
    double statistic_minimum = 8;
    // The lower bound of the metric being summarized.

    double statistic_maximum = 9;
    // The upper bound of the metric being summarized.   

    message DiagramMetricComponent
    {
        // A component of a diagram metric.

        MetricName name = 1;
        // The metric component name.

        string units = 2;
        // Units of the component
        
        double minimum = 3;
        /*Minimum value of the component, which can help in consumption (e.g., 
        in setting plot bounds). When undefined, the statistic data dictates 
        the limits of the range of the diagram.*/
        
        double maximum = 4;
        // Maximum value of the component.

        enum DiagramComponentType 
        {
            // Type of component
            PRIMARY_DOMAIN_AXIS = 0;
            PRIMARY_RANGE_AXIS = 1;
            SECONDARY_DOMAIN_AXIS = 2;
            SECONDARY_RANGE_AXIS = 3;
        }

        DiagramComponentType type = 5;
        // The type of diagram component
    }
}
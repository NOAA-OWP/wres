syntax = "proto3";

package wres.statistics.generated;

import "wresproto/metric_name.proto";

option java_package = "wres.statistics.generated";
option java_outer_classname = "DiagramMetricProto";
option java_multiple_files = true;

message DiagramMetric
{
    /*A message that encapsulates a diagram metric, such as a reliability 
    diagram.*/

    MetricName name = 1;    
    /*Metric name. For example, if the diagram is the reliability diagram, 
    which includes a sharpness plot, then the metric name is the reliability 
    diagram and the metric has three DiagramMetricComponent, one for the 
    forecast probability, one for the observed relative frequency and one for 
    the sample size or sharpness.*/

    repeated DiagramMetricComponent components = 2;
    // Zero or more diagram components. In general, the description of the 
    // diagram metric component should be inband to the corresponding diagram 
    // statistic component, but there is the option to provide a complete, 
    // standalone, description of a metric here, independent of any statistics.
    
    message DiagramMetricComponent
    {
        // A component of a diagram metric.
    
        enum DiagramComponentName 
        {
            // Type of component
            UNKNOWN = 0;
            PROBABILITY_OF_FALSE_DETECTION = 1;
            PROBABILITY_OF_DETECTION = 2;
            RANK_ORDER = 3;
            FORECAST_PROBABILITY = 4;
            OBSERVED_RELATIVE_FREQUENCY = 5;
            OBSERVED_QUANTILES = 6;
            PREDICTED_QUANTILES = 7;
            SAMPLE_SIZE = 8;
        }

        DiagramComponentName name = 1;               

        string units = 2;
        // Units of the component
        
        double minimum = 3;
        /*Minimum value of the component, which can help in consumption (e.g., 
        in setting plot bounds). When undefined, the statistic data dictates 
        the limits of the range of the diagram.*/
        
        double maximum = 4;
        // Maximum value of the component.
    }
}
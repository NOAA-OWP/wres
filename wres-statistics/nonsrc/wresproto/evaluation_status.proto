syntax = "proto3";

package wres.statistics.generated;

import "google/protobuf/timestamp.proto";
import "wresproto/consumer.proto";

option java_package = "wres.statistics.generated";
option java_outer_classname = "EvaluationStatusProto";
option java_multiple_files = true;

message EvaluationStatus
{
    /*A message that encapsulates the status of an evaluation that has been 
    started. An evaluation identifier is required to connect an EvaluationStatus 
    message to an Evaluation message. It is assumed that this identifier is 
    packaged with the protocol; it is not provided inband. An EvaluationStatus 
    message may record some or all of the EvaluationStatusEvent associated with 
    an evaluation at the point of request. For example, it may record only those 
    "new" events surfaced since the last request. Publishers and subscribers 
    also report on their status, in order to allow for evaluations to be 
    completed, validated as complete, and resources returned. A publisher 
    reports when publication is complete and a subscriber reports when 
    consumption has started and completed. A subscriber registers and reports 
    with a consumer identifier in the protocol metadata. Once an evaluation 
    reports publication complete and all subscribers report consumption complete, 
    then the evaluation itself can complete. Each messaging client has a unique 
    client identifier.*/

    string client_id = 1;
    // The unique identifier of the messaging client that is responsible for 
    // this status message.

    google.protobuf.Timestamp time = 2;
    // The time at which the message was created.

    enum CompletionStatus
    {
        // Captures the status of an evaluation that has been started.
        
    	UNKNOWN = 0;
        // The evaluation has unknown status.

    	EVALUATION_STARTED = 1;
        // The evaluation is ongoing.

    	EVALUATION_ONGOING = 2;
        // The evaluation is ongoing.

    	EVALUATION_COMPLETE_REPORTED_SUCCESS = 3;  
        // The evaluation is complete and succeeded.

        EVALUATION_COMPLETE_REPORTED_FAILURE = 4;  
        // The evaluation is complete and failed.

        PUBLICATION_COMPLETE_REPORTED_SUCCESS = 5; 
        // Publication completed without errors.

        PUBLICATION_COMPLETE_REPORTED_FAILURE = 6;
        // Publication completed with errors.

        GROUP_PUBLICATION_COMPLETE = 7;
        // Publication of a message group has been completed. The group 
        // identifier should be set in the groupId field of the encapsulating 
        // EvaluationStatus message.

        CONSUMER_REQUIRED = 8;
        // An evaluation declares the need for a consumer. The required format
        // types may be listed in the formats_required field of the 
        // EvaluationStatus message. Together with the status READY_TO_CONSUME, 
        // this evaluation status is part of the negotiation of a consumption 
        // contract. When a publisher reports CONSUMER_REQUIRED, a consumer
        // responds READY_TO_CONSUME.

        READY_TO_CONSUME = 9;
        // A consumer reports ready to consume. Together with the status 
        // CONSUMER_REQUIRED, this evaluation status is part of the negotiation 
        // of a consumption contract. When a publisher reports 
        // CONSUMER_REQUIRED, a consumer responds READY_TO_CONSUME. Being ready 
        // does not guarantee the contract to the consumer reporting ready. A 
        // consumer must be identified in order to correlate with its completion 
        // status. See the Consumer field in the encapsulating EvaluationStatus 
        // message.

        CONSUMPTION_ONGOING = 10;
        // A consumer reports consumption ongoing. This may be used to register
        // that a consumer is alive when consumption is long-running. A consumer 
        // must be identified in order to correlate with its completion status. 
        // See the Consumer field in the encapsulating EvaluationStatus message.

        CONSUMPTION_COMPLETE_REPORTED_SUCCESS = 11; 
        // A consumer reports completion without errors.
        
        CONSUMPTION_COMPLETE_REPORTED_FAILURE = 12;
        // A consumer reports completion with errors.

        GROUP_CONSUMPTION_COMPLETE = 13;
        // Consumption of a message group has been completed. The group 
        // identifier should be set in the groupId field of the encapsulating 
        // EvaluationStatus message. A consumer must be identified in order to 
        // correlate with its completion status. See the Consumer field in the 
        // encapsulating EvaluationStatus message.
    }
    
    CompletionStatus completion_status = 3;

    Consumer consumer = 4;
    // The consumer associated with this status update. Must be present when 
    // a consumer is reporting its status.

    // When an evaluation reports CompletionStatus.CONSUMER_REQUIRED, the
    // formats required by the evaluation may be listed here.
    repeated Consumer.Format formats_required = 5;

    string group_id = 6;
    // The identifier of a message group when this status update corresponds to
    // a message group.

    message EvaluationStatusEvent
    {
        /*A message that encapsulates an evaluation status event, such as a 
        warning to a user.*/
        
        enum StatusMessageType
        {
            // The type or severity of evaluation status message.
                   
            UNDEFINED = 0;
            // Undefined status.
            
            ERROR = 1;
            // An event that represents an error.
            
            WARN = 2;
            // An event that represents a warning.
                    
            INFO = 3;
            // A neutral information message.
            
            DEBUG = 4;
            /*An event that represents a detailed level of caller-facing 
            information, as distinct from developer-facing/logging.*/
        }
        
        StatusMessageType event_type = 1;
        // The type of event.

        string event_message = 2;
        // The message.

        int32 status_code = 3;
        // A status code, such as an HTTP status code.
    }    

    repeated EvaluationStatusEvent status_events = 7;
    // Zero or more caller-facing status events.
    
    int32 message_count = 8;
    // Number of statistics messages that were published, plus one (for the 
    // evaluation message description that accompanies every evaluation). This 
    // is the expected number of messages a client consumer should receive. 
    // Always set when the completion status indicates that publication is 
    // complete (from that point onwards).

    int32 status_message_count = 9;
    // Number of evaluation status messages (like this one) that were published, 
    // where applicable. This is the expected number of messages a client 
    // consumer should receive. Always set when the completion status indicates 
    // that publication is complete (from that point onwards).

    int32 pairs_message_count = 10;
    // The number of pairs messages that were published, where applicable. This 
    // is the expected number of messages a client consumer should receive.
    // Always set when the completion status indicates that publication is 
    // complete (from that point onwards).

    int32 group_count = 11;
    // The number of groups within the evaluation. Always set when the completion 
    // status indicates that publication is complete (from that point onwards).

    repeated string resources_created = 12;
    // Paths or URIs to resources created during an evaluation event.

}
syntax = "proto3";

package wres.statistics.generated;

import "google/protobuf/timestamp.proto";

option java_package = "wres.statistics.generated";
option java_outer_classname = "EvaluationStatusProto";
option java_multiple_files = true;

message EvaluationStatus
{
    /*A message that encapsulates the status of an evaluation that has been 
    started. An evaluation identifier is required to connect an EvaluationStatus 
    message to an Evaluation message. It is assumed that this identifier is 
    packaged with the protocol; it is not provided inband. An EvaluationStatus 
    message may record some or all of the EvaluationStatusEvent associated with 
    an evaluation at the point of request. For example, it may record only those 
    "new" events surfaced since the last request. Publishers and subscribers 
    also report on their status, in order to allow for evaluations to be 
    completed, validated as complete, and resources returned. A publisher 
    reports when publication is complete and a consumer reports when consumption 
    has started and completed. A consumer registers and reports with a consumer 
    identifier in the protocol metadata. Once an evaluation reports publication 
    complete and all consumers report consumption complete, then the evaluation 
    itself can complete.*/

    google.protobuf.Timestamp time = 1;
    // The time associated with the message.

    enum CompletionStatus
    {
        // Captures the status of an evaluation that has been started.
        
    	UNKNOWN = 0;

    	EVALUATION_STARTED = 1;
        // Evaluation is ongoing.

    	EVALUATION_ONGOING = 2;
        // Evaluation is ongoing.

    	EVALUATION_COMPLETE_REPORTED_SUCCESS = 3;  
        // Evaluation complete and succeeded.

        EVALUATION_COMPLETE_REPORTED_FAILURE = 4;  
        // Evaluation complete and failed.

        PUBLICATION_COMPLETE_REPORTED_SUCCESS = 5; 
        // Publication completed without errors.

        PUBLICATION_COMPLETE_REPORTED_FAILURE = 6;
        // Publication completed with errors.

        READY_TO_CONSUME = 7; 
        // A consumer reports ready to consume. A consumer must be identified
        // in order to correlate with its completion status. See consumer_id.

        CONSUMPTION_ONGOING = 8;
        // A consumer reports ready to consume. A consumer must be identified
        // in order to correlate with its completion status. See consumer_id.

        CONSUMPTION_COMPLETE_REPORTED_SUCCESS = 9; 
        // A consumer reports completion without errors.
        
        CONSUMPTION_COMPLETE_REPORTED_FAILURE = 10;
        // A consumer reports completion with errors.

        GROUP_COMPLETE_REPORTED_SUCCESS = 11;
        // A message group has been completed. The group identifier is assumed 
        // to be part of the protocol metadata.
    }
    
    CompletionStatus completion_status = 2;

    string consumer_id = 3;
    // The unique identifier of the consumer when the status update is about
    // a message consumer. Must be present when a consumer reports.
    
    repeated EvaluationStatusEvent status_events = 4;
    // Zero or more caller-facing status events.
    
    int32 message_count = 5;
    // Number of statistics messages that were published, plus one (for the 
    // evaluation message description that accompanies every evaluation). This 
    // is the expected number of messages a client consumer should receive. 
    // Always set when the completion status indicates that publication is 
    // complete (from that point onwards).

    int32 status_message_count = 6;
    // Number of evaluation status messages (like this one) that were published, 
    // where applicable. This is the expected number of messages a client 
    // consumer should receive. Always set when the completion status indicates 
    // that publication is complete (from that point onwards).

    int32 pairs_message_count = 7;
    // The number of pairs messages that were published, where applicable. This 
    // is the expected number of messages a client consumer should receive.
    // Always set when the completion status indicates that publication is 
    // complete (from that point onwards).

    int32 group_count = 8;
    // The number of groups within the evaluation. Always set when the completion 
    // status indicates that publication is complete (from that point onwards).

    message EvaluationStatusEvent
    {
        /*A message that encapsulates an evaluation status event, such as a 
        warning to a user.*/
        
        enum StatusMessageType
        {
            // The type or severity of evaluation status message.
                   
            UNDEFINED = 0;
            // Undefined status.
            
            ERROR = 1;
            // An event that represents an error.
            
            WARN = 2;
            // An event that represents a warning.
                    
            INFO = 3;
            // A neutral information message.
            
            DEBUG = 4;
            /*An event that represents a detailed level of caller-facing 
            information, as distinct from developer-facing/logging.*/
        }
        
        StatusMessageType event_type = 1;
        // The type of event.

        string event_message = 2;
        // The message.

        int32 status_code = 3;
        // A status code, such as an HTTP status code.
    }
}
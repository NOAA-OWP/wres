<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"
        objectQuotingStrategy="QUOTE_ONLY_RESERVED_WORDS">
    <changeSet id="TimeSeriesValue v1.0" author="Christopher Tubbs" dbms="PostgreSQL">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="TimeSeriesValue" schemaName="wres" />
            </not>
        </preConditions>
        <createTable tableName="TimeSeriesValue" schemaName="wres">
            <column name="timeseries_id" type="integer" remarks="The ID of the time series that the value belongs to">
                <constraints nullable="false" deferrable="true" initiallyDeferred="true"/>
            </column>
            <column name="lead" type="int"
                    remarks="The number of temporal units apart from the time series' initialization data where the value is valid" >
                <constraints nullable="false" deferrable="true" initiallyDeferred="true" />
            </column>
            <column name="series_value" type="double precision"
                    remarks="The value in the time series at the specified lead" />
        </createTable>
        <sql>
            ALTER TABLE wres.TimeSeriesValue OWNER TO wres;
        </sql>
        <comment>
            The wres.TimeSeriesValue table has been added to the database.
        </comment>
    </changeSet>
    <changeSet id="Migrate wres.ForecastValue data to wres.TimeSeriesValue" author="Christopher Tubbs">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableIsEmpty schemaName="wres" tableName="TimeSeriesValue" />
                <tableExists tableName="ForecastValue" schemaName="wres" />
            </and>
        </preConditions>
        <sql>
            INSERT INTO wres.TimeSeriesValue (timeseries_id, lead, series_value)
            SELECT FV.timeseries_id, FV.lead, FV.forecasted_value
            FROM wres.ForecastValue FV
            WHERE NOT EXISTS (
                SELECT 1
                FROM wres.TimeSeriesValue TSV
                WHERE TSV.timeseries_id = FV.timeseries_id
                    AND TSV.lead = FV.lead
                    AND TSV.series_value = FV.forecasted_value
                );
        </sql>
        <comment>Data from wres.ForecastValue successfully migrated to wres.TimeSeriesValue</comment>
    </changeSet>
</databaseChangeLog>
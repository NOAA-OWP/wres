package wres;

import java.nio.file.Path;
import java.util.Collections;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;

/**
 * An execution result.
 */

public class ExecutionResult
{
    /** The caller-supplied project name extracted during execution if available. */
    private final String name;

    /** The evaluation ID generated by the core wres system */
    private final String evaluationId;

    /** The project identity, if available. */
    private final String hash;

    /** The declaration string, if available. */
    private final String declaration;

    /** The exception that stopped execution if execution failed without Error. When an Error occurs, this should not be
     * constructed and the Error should propagate. */
    private final Exception exception;

    /** The resources written. */
    private final Set<Path> resources;

    /** Whether the execution was cancelled. */
    private final boolean cancelled;

    /**
     * Create a successful result.
     * @return an execution result
     */

    public static ExecutionResult success()
    {
        return new ExecutionResult( null, null, null, null, Set.of(), false, null );
    }

    /**
     * Create a successful result with a project name.
     * @param name the project name
     * @param declaration the project declaration string
     * @return an execution result
     */

    public static ExecutionResult success( String name, String declaration )
    {
        return new ExecutionResult( name, null, declaration, null, Set.of(), false, null );
    }

    /**
     * Create a successful result with a project name and a collection of resources that were created.
     * @param name the project name
     * @param declaration the project declaration string
     * @param hash the hash of the project datasets
     * @param resources the resources created
     * @param evaluationId the evaluation id generated by the core wres
     * @return an execution result
     * @throws NullPointerException if the set of resources is null
     */

    public static ExecutionResult success( String name, String declaration, String hash, Set<Path> resources, String evaluationId )
    {
        return new ExecutionResult( name, hash, declaration, null, resources, false, evaluationId );
    }

    /**
     * Create an unsuccessful result with an exception thrown.
     * @param e the exception thrown
     * @param cancelled whether the execution was cancelled
     * @return an execution result
     */

    public static ExecutionResult failure( Exception e, boolean cancelled )
    {
        Objects.requireNonNull( e );
        return new ExecutionResult( null, null, null, e, Set.of(), cancelled, null );
    }

    /**
     * Create a default unsuccessful result with an exception thrown.
     * @return an execution result
     */

    public static ExecutionResult failure()
    {
        return new ExecutionResult( null, null, null, new Exception( "default failure" ), Set.of(), false, null );
    }

    /**
     * Create an unsuccessful result with a project name and an exception thrown.
     * @param declaration the project declaration string
     * @param e the exception thrown
     * @param cancelled whether the execution was cancelled
     * @return an execution result
     */

    public static ExecutionResult failure( String declaration, Exception e, boolean cancelled )
    {
        Objects.requireNonNull( e );
        return new ExecutionResult( null, null, declaration, e, Set.of(), cancelled, null );
    }

    /**
     * Create an unsuccessful result with a project name and an exception thrown.
     * @param name the project name
     * @param declaration the project declaration string
     * @param e the exception thrown
     * @param cancelled whether the execution was cancelled
     * @param evaluationId the evaluation id generated by the core
     * @return an execution result
     */

    public static ExecutionResult failure( String name, String declaration, Exception e, boolean cancelled, String evaluationId )
    {
        Objects.requireNonNull( e );
        return new ExecutionResult( name, null, declaration, e, Set.of(), cancelled, evaluationId );
    }

    /**
     * Create an unsuccessful result with a project name and an exception thrown.
     * @param e the exception thrown
     * @param cancelled whether the execution was cancelled
     * @param evaluationId the evaluation id generated by the core
     * @return an execution result
     */

    public static ExecutionResult failure( Exception e, boolean cancelled, String evaluationId )
    {
        Objects.requireNonNull( e );
        return new ExecutionResult( null, null, null, e, Set.of(), cancelled, evaluationId );
    }

    /**
     * Create an unsuccessful result with a project name and an exception thrown.
     * @param name the project name
     * @param declaration the project declaration string
     * @param e the exception thrown
     * @param cancelled whether the execution was cancelled
     * @return an execution result
     */

    public static ExecutionResult failure( String name, String declaration, Exception e, boolean cancelled )
    {
        Objects.requireNonNull( e );
        return new ExecutionResult( name, null, declaration, e, Set.of(), cancelled, null );
    }

    /**
     * @return the name of the project declaration on which the evaluation is based or null
     */

    public String getName()
    {
        return this.name;
    }

    /**
     * @return the hash of the project datasets or null
     */

    public String getHash()
    {
        return this.hash;
    }

    /**
     * @return the exception thrown upon failure or null
     */

    public Exception getException()
    {
        return exception;
    }

    /**
     * @return the resources created during the execution
     */

    public Set<Path> getResources()
    {
        return this.resources; // Unmodifiable view
    }

    /**
     * @return the declaration string or null
     */

    public String getDeclaration()
    {
        return this.declaration;
    }

    /**
     * @return whether the execution was cancelled
     */

    public boolean cancelled()
    {
        return this.cancelled;
    }

    /**
     * @return the evaluation id generated by the core wres
     */
    public String getEvaluationId()
    {
        return this.evaluationId;
    }

    /**
     * Success?
     * @return True when the result was success, false when it was failure.
     */

    public boolean succeeded()
    {
        return !this.failed();
    }

    /**
     * Failure?
     * @return True when the result was failure, false when it was success.
     */

    public boolean failed()
    {
        Exception e = this.getException();
        return Objects.nonNull( e );
    }

    /**
     * Hidden constructor.
     * @param name the project name, if available
     * @param hash the hash of the project datasets, if available
     * @param declaration the declaration, if available
     * @param exception an exception, if applicable
     * @param resources the resources created, not null
     * @param cancelled whether the execution was cancelled
     * @param evaluationId the evaluation id generated by the core wres
     */

    private ExecutionResult( String name,
                             String hash,
                             String declaration,
                             Exception exception,
                             Set<Path> resources,
                             boolean cancelled,
                             String evaluationId )
    {
        Objects.requireNonNull( resources );

        this.name = name;
        this.hash = hash;
        this.declaration = declaration;
        this.exception = exception;
        this.resources = Collections.unmodifiableSet( new TreeSet<>( resources ) );
        this.cancelled = cancelled;
        this.evaluationId = evaluationId;
    }
}

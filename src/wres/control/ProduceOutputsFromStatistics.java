package wres.control;

import java.io.Closeable;
import java.io.IOException;
import java.nio.file.Path;
import java.text.Format;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import wres.config.ProjectConfigException;
import wres.config.ProjectConfigPlus;
import wres.config.generated.DestinationConfig;
import wres.config.generated.DestinationType;
import wres.config.generated.GraphicalType;
import wres.config.generated.MetricConfigName;
import wres.config.generated.ProjectConfig;
import wres.config.generated.ProjectConfig.Outputs;
import wres.datamodel.MetricConstants;
import wres.datamodel.MetricConstants.StatisticType;
import wres.datamodel.messages.MessageFactory;
import wres.datamodel.Slicer;
import wres.datamodel.statistics.BoxplotStatisticOuter;
import wres.datamodel.statistics.DoubleScoreStatisticOuter;
import wres.datamodel.statistics.DoubleScoreStatisticOuter.DoubleScoreComponentOuter;
import wres.datamodel.statistics.DurationScoreStatisticOuter;
import wres.datamodel.statistics.DurationScoreStatisticOuter.DurationScoreComponentOuter;
import wres.datamodel.statistics.DiagramStatisticOuter;
import wres.datamodel.statistics.DurationDiagramStatisticOuter;
import wres.datamodel.statistics.Statistic;
import wres.datamodel.statistics.StatisticsForProject;
import wres.engine.statistics.metric.config.MetricConfigHelper;
import wres.io.config.ConfigHelper;
import wres.io.writing.SharedStatisticsWriters;
import wres.io.writing.commaseparated.statistics.CommaSeparatedBoxPlotWriter;
import wres.io.writing.commaseparated.statistics.CommaSeparatedDiagramWriter;
import wres.io.writing.commaseparated.statistics.CommaSeparatedDurationDiagramWriter;
import wres.io.writing.commaseparated.statistics.CommaSeparatedScoreWriter;
import wres.io.writing.png.PNGBoxPlotWriter;
import wres.io.writing.png.PNGDiagramWriter;
import wres.io.writing.png.PNGDoubleScoreWriter;
import wres.io.writing.png.PNGDurationScoreWriter;
import wres.statistics.generated.Statistics;
import wres.io.writing.png.PNGDurationDiagramWriter;
import wres.system.SystemSettings;

/**
 * <p>A processor that consumes statistics and produces outputs. Outputs are generated by registering instances of 
 * {@link Consumer} for particular types output formats and statistical data. The consumers are stored by 
 * {@link StatisticType}, i.e. by type of statistical data. Each store contains the consumers for any formats of output 
 * required, i.e. any {@link DestinationType}.</p>
 * 
 * <p>Outputs may be written unconditionally, for all types and formats available, or conditionally, for specific 
 * combinations of data type and format. Conditional writing is determined on construction with a {@link BiPredicate} 
 * condition on {@link StatisticType} and {@link DestinationType}.</p>.
 * 
 * @author james.brown@hydrosolved.com
 * @author jesse.bickel@***REMOVED***
 */

class ProduceOutputsFromStatistics implements Consumer<StatisticsForProject>,
        Closeable,
        Supplier<Set<Path>>
{

    /**
     * Logger.
     */

    private static final Logger LOGGER = LoggerFactory.getLogger( ProduceOutputsFromStatistics.class );

    /**
     * Null output error string
     */

    private static final String NULL_OUTPUT_STRING = "Specify non-null outputs for product generation.";

    /**
     * System settings.
     */

    private final SystemSettings systemSettings;

    /**
     * The resolved project configuration.
     */

    private final ResolvedProject resolvedProject;

    /**
     * Only writes when the condition is true.
     */

    private final BiPredicate<StatisticType, DestinationType> writeWhenTrue;

    /**
     * Store of consumers for processing {@link DoubleScoreStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<DoubleScoreStatisticOuter>>> doubleScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link DurationScoreStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<DurationScoreStatisticOuter>>> durationScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link DiagramStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<DiagramStatisticOuter>>> diagramConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link BoxplotStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<BoxplotStatisticOuter>>> boxPlotConsumersPerPair =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link BoxplotStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<BoxplotStatisticOuter>>> boxPlotConsumersPerPool =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link DiagramDiagramStatisticOuter} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<List<DurationDiagramStatisticOuter>>> pairedConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Writers that consume all types of statistics.
     */

    private final Set<Consumer<Statistics>> statisticsConsumers = new HashSet<>();

    /**
     * A map of output formats for which specific metrics should not be written. 
     */

    private final Map<DestinationType, Set<MetricConstants>> suppressTheseDestinationsForTheseMetrics;

    /**
     * List of resources that ProductProcessor opened that it needs to close
     */
    private final List<Closeable> resourcesToClose;

    /**
     * List of potential writers that the ProductProcessor opened that supply
     * a list of paths that those writers actually ended up writing to.
     */
    private final List<Supplier<Set<Path>>> writersToPaths;

    /**
     * The duration units obtained from the {@link #resolvedProject} and stored here for convenience.
     */

    private final ChronoUnit durationUnits;

    /**
     * Build a product processor.
     * 
     * @param systemSettings the system settings
     * @param resolvedProject the resolved project
     * @param writeWhenTrue the condition under which outputs should be written
     * @param sharedWriters an optional set of shared writers to consume outputs
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    static ProduceOutputsFromStatistics of( SystemSettings systemSettings,
                                            ResolvedProject resolvedProject,
                                            BiPredicate<StatisticType, DestinationType> writeWhenTrue,
                                            SharedStatisticsWriters sharedWriters )
    {
        return new ProduceOutputsFromStatistics( systemSettings,
                                                 resolvedProject,
                                                 writeWhenTrue,
                                                 sharedWriters );
    }

    /**
     * Produces graphical and numerical output for each type available in the input.
     * 
     * @param input the input containing results for one project
     * @throws WresProcessingException if the outputs could not be written
     */

    @Override
    public void accept( final StatisticsForProject input )
    {

        try
        {
            // Diagram output available
            if ( input.hasStatistic( StatisticType.DIAGRAM ) )
            {
                this.processDiagramOutputs( input.getDiagramStatistics() );
            }

            // Box-plot output available per pair
            if ( input.hasStatistic( StatisticType.BOXPLOT_PER_PAIR ) )
            {
                this.processBoxPlotOutputsPerPair( input.getBoxPlotStatisticsPerPair() );
            }

            // Box-plot output available per pool
            if ( input.hasStatistic( StatisticType.BOXPLOT_PER_POOL ) )
            {
                this.processBoxPlotOutputsPerPool( input.getBoxPlotStatisticsPerPool() );
            }

            // Ordinary scores available
            if ( input.hasStatistic( StatisticType.DOUBLE_SCORE ) )
            {
                this.processDoubleScoreOutputs( input.getDoubleScoreStatistics() );
            }

            // Duration scores available
            if ( input.hasStatistic( StatisticType.DURATION_SCORE ) )
            {
                this.processDurationScoreOutputs( input.getDurationScoreStatistics() );
            }

            // Paired metric output available
            if ( input.hasStatistic( StatisticType.DURATION_DIAGRAM ) )
            {
                this.processDurationDiagramStatistic( input.getInstantDurationPairStatistics() );
            }

            // Consumers of all statistics
            if ( !this.statisticsConsumers.isEmpty() )
            {
                this.processMultiStatistics( input );
            }
        }
        catch ( InterruptedException e )
        {
            String message = "Interrupted while processing intermediate results:";
            Thread.currentThread().interrupt();

            throw new WresProcessingException( message, e );
        }
    }

    private List<Supplier<Set<Path>>> getWritersToPaths()
    {
        return Collections.unmodifiableList( this.writersToPaths );
    }

    /**
     * @return paths actually written to by this processor so far.
     */
    @Override
    public Set<Path> get()
    {
        Set<Path> paths = new HashSet<>();

        for ( Supplier<Set<Path>> supplierOfPaths : this.getWritersToPaths() )
        {
            paths.addAll( supplierOfPaths.get() );
        }

        LOGGER.debug( "Returning paths from ProductProcessor {}: {}", this, paths );
        return Collections.unmodifiableSet( paths );
    }

    /**
     * <p>Builds a set of consumers for writing based on the project configuration.</p>
     * 
     * <p>Edit this method as new consumer types are supported by the project configuration.</p>
     * 
     * @param sharedWriters an optional set of shared writers
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildConsumers( SharedStatisticsWriters sharedWriters )
    {
        // There is one consumer per project for each type, because consumers are built
        // with projects, not destinations. The consumers must iterate destinations.

        // Register consumers for the NetCDF output type
        if ( this.configNeedsThisTypeOfOutput( DestinationType.NETCDF ) )
        {
            // implicitly passing resolvedProject via shared state
            this.buildNetCDFConsumers( sharedWriters );
        }

        // Register consumers for the CSV output type
        if ( this.configNeedsThisTypeOfOutput( DestinationType.CSV ) )
        {
            this.buildCommaSeparatedConsumers();
        }

        // Register consumers for the PNG output type
        if ( this.configNeedsThisTypeOfOutput( DestinationType.PNG ) )
        {
            this.buildPortableNetworkGraphicsConsumers();
        }

        if ( this.configNeedsThisTypeOfOutput( DestinationType.PROTOBUF ) )
        {
            this.buildMultiStatisticsConsumers( sharedWriters );
        }
    }

    /**
     * Builds a set of consumers for writing files of Comma Separated Values (CSV).
     * Also builds a set of writers to ask for paths written to later.
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildCommaSeparatedConsumers()
    {
        ProjectConfig projectConfig = this.getProjectConfig();
        Path outputDirectory = this.getResolvedProject().getOutputDirectory();

        // Build the consumers conditionally
        if ( this.writeWhenTrue.test( StatisticType.DIAGRAM, DestinationType.CSV ) )
        {
            CommaSeparatedDiagramWriter diagramWriter =
                    CommaSeparatedDiagramWriter.of( projectConfig,
                                                    this.getDurationUnits(),
                                                    outputDirectory );
            this.diagramConsumers.put( DestinationType.CSV,
                                       diagramWriter );
            this.writersToPaths.add( diagramWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_PAIR, DestinationType.CSV ) )
        {
            CommaSeparatedBoxPlotWriter boxPlotWriter =
                    CommaSeparatedBoxPlotWriter.of( projectConfig,
                                                    this.getDurationUnits(),
                                                    outputDirectory );
            this.boxPlotConsumersPerPair.put( DestinationType.CSV,
                                              boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_POOL, DestinationType.CSV ) )
        {
            CommaSeparatedBoxPlotWriter boxPlotWriter =
                    CommaSeparatedBoxPlotWriter.of( projectConfig,
                                                    this.getDurationUnits(),
                                                    outputDirectory );
            this.boxPlotConsumersPerPool.put( DestinationType.CSV,
                                              boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DURATION_DIAGRAM, DestinationType.CSV ) )
        {
            // Add the paths for the paired writer: #61841
            CommaSeparatedDurationDiagramWriter pairedWriter =
                    CommaSeparatedDurationDiagramWriter.of( projectConfig,
                                                            this.getDurationUnits(),
                                                            outputDirectory );
            this.pairedConsumers.put( DestinationType.CSV, pairedWriter );
            this.writersToPaths.add( pairedWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DOUBLE_SCORE, DestinationType.CSV ) )
        {
            // Format
            Format formatter = this.getDecimalFormatter();
            Function<DoubleScoreComponentOuter, String> mapper = next -> {
                if ( Objects.nonNull( formatter ) )
                {
                    return formatter.format( next.getData().getValue() );
                }

                return Double.toString( next.getData().getValue() );
            };

            CommaSeparatedScoreWriter<DoubleScoreComponentOuter, DoubleScoreStatisticOuter> doubleScoreWriter =
                    CommaSeparatedScoreWriter.of( projectConfig,
                                                  this.getDurationUnits(),
                                                  outputDirectory,
                                                  mapper );
            this.doubleScoreConsumers.put( DestinationType.CSV,
                                           doubleScoreWriter );
            this.writersToPaths.add( doubleScoreWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DURATION_SCORE, DestinationType.CSV ) )
        {
            CommaSeparatedScoreWriter<DurationScoreComponentOuter, DurationScoreStatisticOuter> durationScoreWriter =
                    CommaSeparatedScoreWriter.of( projectConfig,
                                                  this.getDurationUnits(),
                                                  outputDirectory,
                                                  next -> MessageFactory.parse( next.getData().getValue() )
                                                                        .toString() );
            this.durationScoreConsumers.put( DestinationType.CSV,
                                             durationScoreWriter );
            this.writersToPaths.add( durationScoreWriter );
        }
    }

    /**
     * Returns a formatter for decimal values as strings, null if none is defined.
     * 
     * @return a formatter or null
     */

    private Format getDecimalFormatter()
    {
        for ( DestinationConfig next : this.getProjectConfig().getOutputs().getDestination() )
        {
            if ( next.getType() == DestinationType.CSV || next.getType() == DestinationType.NUMERIC )
            {
                return ConfigHelper.getDecimalFormatter( next );
            }
        }

        return null;
    }

    /**
     * Builds a set of consumers for writing files in Portable Network Graphics (PNG) format.
     *
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildPortableNetworkGraphicsConsumers()
    {
        ProjectConfigPlus projectConfigPlus = this.getProjectConfigPlus();
        Path outputDirectory = this.getResolvedProject().getOutputDirectory();

        // Build the consumers conditionally
        if ( this.writeWhenTrue.test( StatisticType.DIAGRAM, DestinationType.PNG ) )
        {
            PNGDiagramWriter diagramWriter = PNGDiagramWriter.of( this.getSystemSettings(),
                                                                  projectConfigPlus,
                                                                  this.getDurationUnits(),
                                                                  outputDirectory );
            this.diagramConsumers.put( DestinationType.PNG,
                                       diagramWriter );
            this.writersToPaths.add( diagramWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_PAIR, DestinationType.PNG ) )
        {
            PNGBoxPlotWriter boxPlotWriter = PNGBoxPlotWriter.of( this.getSystemSettings(),
                                                                  projectConfigPlus,
                                                                  this.getDurationUnits(),
                                                                  outputDirectory );
            this.boxPlotConsumersPerPair.put( DestinationType.PNG,
                                              boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_POOL, DestinationType.PNG ) )
        {
            PNGBoxPlotWriter boxPlotWriter = PNGBoxPlotWriter.of( this.getSystemSettings(),
                                                                  projectConfigPlus,
                                                                  this.getDurationUnits(),
                                                                  outputDirectory );
            this.boxPlotConsumersPerPool.put( DestinationType.PNG,
                                              boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DURATION_DIAGRAM, DestinationType.PNG ) )
        {
            PNGDurationDiagramWriter pairedWriter = PNGDurationDiagramWriter.of( this.getSystemSettings(),
                                                                                 projectConfigPlus,
                                                                                 this.getDurationUnits(),
                                                                                 outputDirectory );
            this.pairedConsumers.put( DestinationType.PNG,
                                      pairedWriter );
            this.writersToPaths.add( pairedWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DOUBLE_SCORE, DestinationType.PNG ) )
        {
            PNGDoubleScoreWriter doubleScoreWriter =
                    PNGDoubleScoreWriter.of( this.getSystemSettings(),
                                             projectConfigPlus,
                                             this.getDurationUnits(),
                                             outputDirectory );
            this.doubleScoreConsumers.put( DestinationType.PNG,
                                           doubleScoreWriter );
            this.writersToPaths.add( doubleScoreWriter );
        }

        if ( this.writeWhenTrue.test( StatisticType.DURATION_SCORE, DestinationType.PNG ) )
        {
            PNGDurationScoreWriter durationScoreWriter =
                    PNGDurationScoreWriter.of( this.getSystemSettings(),
                                               projectConfigPlus,
                                               this.getDurationUnits(),
                                               outputDirectory );
            this.durationScoreConsumers.put( DestinationType.PNG,
                                             durationScoreWriter );
            this.writersToPaths.add( durationScoreWriter );
        }

    }

    /**
     * Builds a set of consumers for writing blobs in netCDF format.
     *
     * @throws ProjectConfigException if the project configuration is invalid for writing
     * @throws IOException if the initial blobs could not be written
     */

    private void buildNetCDFConsumers( SharedStatisticsWriters sharedWriters )
    {
        // Build the consumers conditionally
        if ( Objects.nonNull( sharedWriters )
             && sharedWriters.contains( StatisticType.DOUBLE_SCORE, DestinationType.NETCDF ) )
        {
            LOGGER.debug( "There are shared netcdf consumers for {}", this );

            this.doubleScoreConsumers.put( DestinationType.NETCDF,
                                           next -> sharedWriters.getNetcdfOutputWriter().accept( next ) );
            this.writersToPaths.add( sharedWriters );
            // Not in charge of closing the sharedwriters, that is out at top.
        }
        else
        {
            LOGGER.debug( "There are NOT netcdf consumers for {}", this );
        }
    }

    /**
     * Builds a set of consumers for formats that accept all statistics.
     *
     * @throws ProjectConfigException if the project configuration is invalid for writing
     * @throws IOException if the initial blobs could not be written
     */

    private void buildMultiStatisticsConsumers( SharedStatisticsWriters sharedWriters )
    {
        // Build the consumers conditionally
        if ( Objects.nonNull( sharedWriters ) && sharedWriters.contains( DestinationType.PROTOBUF ) )
        {
            LOGGER.debug( "There are shared protobuf consumers for {}", this );

            this.statisticsConsumers.add( sharedWriters.getProtobufWriter() );
            this.writersToPaths.add( sharedWriters );
            // Not in charge of closing the sharedwriters, that is out at top.
        }
        else
        {
            LOGGER.debug( "There are NOT shared protobuf consumers for {}", this );
        }
    }

    /**
     * Processes {@link DiagramStatisticOuter}.
     * 
     * @param outputs the outputs to consume
     * @throws NullPointerException if the input is null
     */

    private void processDiagramOutputs( List<DiagramStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<DiagramStatisticOuter>>> next : this.diagramConsumers.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.DIAGRAM, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<DiagramStatisticOuter> filtered = this.getFilteredStatisticsForThisDestinationType( outputs,
                                                                                                         next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link StatisticsForProject} that contain all statistics.
     * 
     * @param statisticsForProject the statistics to consume
     * @throws InterruptedException if the parsing was interrupted
     * @throws NullPointerException if the input is null
     */

    private void processMultiStatistics( StatisticsForProject statisticsForProject ) throws InterruptedException
    {
        Objects.requireNonNull( statisticsForProject, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Consumer<Statistics> nextConsumer : this.statisticsConsumers )
        {
            Collection<Statistics> statistics = MessageFactory.parse( statisticsForProject );
            statistics.forEach( nextConsumer::accept );
        }
    }

    /**
     * Processes {@link BoxplotStatisticOuter} per pair.
     * 
     * @param outputs the output to consume
     * @throws NullPointerException if the input is null
     */

    private void processBoxPlotOutputsPerPair( List<BoxplotStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<BoxplotStatisticOuter>>> next : this.boxPlotConsumersPerPair.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_PAIR, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<BoxplotStatisticOuter> filtered = this.getFilteredStatisticsForThisDestinationType( outputs,
                                                                                                         next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link BoxplotStatisticOuter} per pool.
     * 
     * @param outputs the output to consume
     * @throws NullPointerException if the input is null
     */

    private void processBoxPlotOutputsPerPool( List<BoxplotStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<BoxplotStatisticOuter>>> next : this.boxPlotConsumersPerPool.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.BOXPLOT_PER_POOL, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<BoxplotStatisticOuter> filtered = this.getFilteredStatisticsForThisDestinationType( outputs,
                                                                                                         next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link DoubleScoreStatisticOuter}.
     * 
     * @param outputs the output to consume
     * @throws NullPointerException if the input is null
     */

    private void processDoubleScoreOutputs( List<DoubleScoreStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<DoubleScoreStatisticOuter>>> next : this.doubleScoreConsumers.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.DOUBLE_SCORE, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<DoubleScoreStatisticOuter> filtered = this.getFilteredStatisticsForThisDestinationType( outputs,
                                                                                                             next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }

    }

    /**
     * Processes {@link DurationScoreStatisticOuter}.
     * 
     * @param outputs the output to consume
     * @throws NullPointerException if the input is null
     */

    private void processDurationScoreOutputs( List<DurationScoreStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<DurationScoreStatisticOuter>>> next : this.durationScoreConsumers.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.DURATION_SCORE, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<DurationScoreStatisticOuter> filtered = this.getFilteredStatisticsForThisDestinationType( outputs,
                                                                                                               next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link DiagramDiagramStatisticOuter}.
     * 
     * @param outputs the output to consume
     * @throws NullPointerException if the input is null
     */

    private void processDurationDiagramStatistic( List<DurationDiagramStatisticOuter> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<List<DurationDiagramStatisticOuter>>> next : this.pairedConsumers.entrySet() )
        {
            // Consume conditionally
            if ( this.writeWhenTrue.test( StatisticType.DURATION_DIAGRAM, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                List<DurationDiagramStatisticOuter> filtered =
                        this.getFilteredStatisticsForThisDestinationType( outputs, next.getKey() );

                // Consume the output
                next.getValue().accept( filtered );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Returns true if the project configuration has one or more of the given types
     * 
     * @param type the type of output to look for
     * @return true if the output type is present, false otherwise
     */

    private boolean configNeedsThisTypeOfOutput( DestinationType type )
    {
        ProjectConfig projectConfig = this.getProjectConfig();
        Outputs output = projectConfig.getOutputs();
        if ( Objects.isNull( output ) || output.getDestination().isEmpty() )
        {
            LOGGER.debug( "No destinations specified for config {}", projectConfig );
            return false;
        }

        // Interpret default types for graphic and numeric
        Set<DestinationType> allTypes = new HashSet<>();
        allTypes.add( type );
        if ( type == DestinationType.PNG )
        {
            allTypes.add( DestinationType.GRAPHIC );
        }
        if ( type == DestinationType.CSV )
        {
            allTypes.add( DestinationType.NUMERIC );
        }
        // Return true if any destination types appear in allTypes, otherwise false
        return output.getDestination().stream().map( DestinationConfig::getType ).anyMatch( allTypes::contains );
    }


    /**
     * Closes resources that were opened by this class.
     */

    @Override
    public void close()
    {
        for ( Closeable resource : this.resourcesToClose )
        {
            LOGGER.debug( "About to close {}", resource );

            try
            {
                resource.close();
            }
            catch ( IOException ioe )
            {
                // Not much we can do at this point. We tried to close, but
                // we need to try to close all the other resources too before
                // the software exits.
                LOGGER.warn( "Unable to close resource {}", resource, ioe );
            }
        }
    }


    /**
     * Logs the status of product generation.
     * 
     * @param <T> the output type
     * @param output the output
     * @param type the output type
     * @param startOfProcess is true to log the start, false to log the end
     */

    private <T extends Statistic<?>> void
            log( List<T> output, DestinationType type, boolean startOfProcess )
    {

        String positionString = "Completed ";
        if ( startOfProcess )
        {
            positionString = "Started ";
        }

        if ( !output.isEmpty() )
        {
            LOGGER.debug( "{} processing of result type '{}' for '{}' "
                          + "at time window {}.",
                          positionString,
                          type,
                          output.get( 0 ).getMetadata().getIdentifier(),
                          output.get( 0 ).getMetadata().getTimeWindow() );
        }
        else
        {
            LOGGER.debug( "{} processing of result type '{}' for unknown data at "
                          + "unknown time window.",
                          positionString,
                          type );
        }
    }

    /**
     * @return the resolved project
     */

    private ResolvedProject getResolvedProject()
    {
        return this.resolvedProject;
    }

    /**
     * @return the project config with more (2nd order project config)
     */

    private ProjectConfigPlus getProjectConfigPlus()
    {
        return this.getResolvedProject()
                   .getProjectConfigPlus();
    }

    /**
     * @return the project config
     */

    private ProjectConfig getProjectConfig()
    {
        return this.getResolvedProject()
                   .getProjectConfig();
    }

    /**
     * @return the duration units
     */

    private ChronoUnit getDurationUnits()
    {
        return this.durationUnits;
    }

    /**
     * Suppress the prescribed output types for the metrics returned.
     * 
     * @param projectConfig the project declaration
     * @param allMetrics the set of all metrics in the project
     * @return the metrics for which particular output types should be suppressed.
     * @throws NullPointerException if the input is null
     */

    private Map<DestinationType, Set<MetricConstants>>
            getMetricsForWhichOutputsShouldBeSuppressed( ProjectConfig projectConfig, Set<MetricConstants> allMetrics )
    {
        Objects.requireNonNull( projectConfig );

        Map<DestinationType, Set<MetricConstants>> returnMe = new EnumMap<>( DestinationType.class );

        // Graphics
        List<DestinationConfig> destinations = projectConfig.getOutputs().getDestination();
        for ( DestinationConfig next : destinations )
        {
            // Graphical types
            GraphicalType graphical = next.getGraphical();
            if ( Objects.nonNull( graphical ) )
            {
                Set<MetricConstants> suppressMe = this.translate( graphical.getSuppressMetric(), allMetrics );
                returnMe.put( DestinationType.GRAPHIC, suppressMe );
                returnMe.put( DestinationType.PNG, suppressMe );
            }

        }

        returnMe = Collections.unmodifiableMap( returnMe );

        if ( LOGGER.isDebugEnabled() && !returnMe.isEmpty() )
        {
            LOGGER.debug( "Discovered a map of destination types for which metrics should be suppressed: {}.",
                          returnMe );
        }

        return returnMe;
    }

    /**
     * Translates a list of {@link MetricConfigName} to a set of {@link MetricConstants}.
     * 
     * @param metrics a list of metrics by declared name
     * @param allMetrics the set of all metrics in the project to use when encountering 
     *            {@link MetricConfigName#ALL_VALID}
     * @return a set of metrics by internal name
     * @throws NullPointerException if any input is null
     */

    private Set<MetricConstants> translate( List<MetricConfigName> metrics, Set<MetricConstants> allMetrics )
    {
        Objects.requireNonNull( metrics );

        Set<MetricConstants> returnMe = new HashSet<>();

        for ( MetricConfigName next : metrics )
        {
            if ( MetricConfigName.ALL_VALID == next )
            {
                return allMetrics;
            }

            MetricConstants add = MetricConstants.valueOf( next.name() );

            returnMe.add( add );
        }

        return Collections.unmodifiableSet( returnMe );
    }

    /**
     * Filters the input statistics for the prescribed destination type relative to the output types that should be 
     * suppressed for particular statistics. See `getSuppressTheseMetricsForThisDestinationType()` down below.
     * 
     * @param statistics the statistics to filter
     * @param destinationType the destination type by which to filter
     * @return a filtered list of statistics, omitting those to be suppressed for the prescribed destination type
     * @throws NullPointerException if any input is null
     */

    private <T extends Statistic<?>> List<T>
            getFilteredStatisticsForThisDestinationType( List<T> statistics, DestinationType destinationType )
    {
        Objects.requireNonNull( statistics );

        Objects.requireNonNull( destinationType );

        Set<MetricConstants> suppress = this.getSuppressTheseMetricsForThisDestinationType( destinationType );

        // Filter suppressed types
        if ( Objects.nonNull( suppress ) )
        {
            return Slicer.filter( statistics, next -> !suppress.contains( next.getMetricName() ) );
        }

        // Nothing filtered
        return statistics;
    }

    /**
     * Returns the metrics that should be suppressed for the prescribed destination.
     * 
     * @return the map of destination types to statistics for suppression
     */

    private Set<MetricConstants> getSuppressTheseMetricsForThisDestinationType( DestinationType destinationType )
    {
        return this.suppressTheseDestinationsForTheseMetrics.get( destinationType );
    }

    /**
     * @return the system settings.
     */

    private SystemSettings getSystemSettings()
    {
        return this.systemSettings;
    }

    /**
     * Build a product processor that writes conditionally.
     * 
     * @param systemSettings the system settings
     * @param resolvedProject the resolved project
     * @param writeWhenTrue the condition under which outputs should be written
     * @param sharedWriters an optional set of shared writers to consume outputs
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    private ProduceOutputsFromStatistics( SystemSettings systemSettings,
                                          ResolvedProject resolvedProject,
                                          BiPredicate<StatisticType, DestinationType> writeWhenTrue,
                                          SharedStatisticsWriters sharedWriters )
    {
        Objects.requireNonNull( systemSettings );
        Objects.requireNonNull( resolvedProject,
                                "Specify a non-null configuration for the results processor." );

        Objects.requireNonNull( writeWhenTrue, "Specify a non-null condition to ignore." );

        this.systemSettings = systemSettings;
        this.resourcesToClose = new ArrayList<>( 1 );
        this.writersToPaths = new ArrayList<>();
        this.resolvedProject = resolvedProject;
        this.writeWhenTrue = writeWhenTrue;

        ProjectConfig projectConfig = resolvedProject.getProjectConfig();

        // Could also be supplied on construction, but overhead is not too large
        Set<MetricConstants> metrics = MetricConfigHelper.getMetricsFromConfig( projectConfig );

        this.suppressTheseDestinationsForTheseMetrics =
                this.getMetricsForWhichOutputsShouldBeSuppressed( projectConfig, metrics );

        // Register the duration units
        String durationUnitsString =
                resolvedProject.getProjectConfig().getOutputs().getDurationFormat().value().toUpperCase();
        this.durationUnits = ChronoUnit.valueOf( durationUnitsString );

        // Register output consumers
        try
        {
            // implicitly passing resolvedProject via shared state
            this.buildConsumers( sharedWriters );
        }
        catch ( ProjectConfigException e )
        {
            throw new WresProcessingException( "While processing the project configuration to write output:", e );
        }
    }

}

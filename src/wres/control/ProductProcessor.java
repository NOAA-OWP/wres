package wres.control;

import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import java.util.EnumMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import wres.config.ProjectConfigException;
import wres.config.generated.DestinationConfig;
import wres.config.generated.DestinationType;
import wres.config.generated.ProjectConfig;
import wres.config.generated.ProjectConfig.Outputs;
import wres.datamodel.MetricConstants.MetricOutputGroup;
import wres.datamodel.metadata.MetricOutputMetadata;
import wres.datamodel.outputs.BoxPlotOutput;
import wres.datamodel.outputs.DoubleScoreOutput;
import wres.datamodel.outputs.DurationScoreOutput;
import wres.datamodel.outputs.MatrixOutput;
import wres.datamodel.outputs.MetricOutputAccessException;
import wres.datamodel.outputs.MetricOutputForProjectByTimeAndThreshold;
import wres.datamodel.outputs.MetricOutputMapByTimeAndThreshold;
import wres.datamodel.outputs.MetricOutputMultiMapByTimeAndThreshold;
import wres.datamodel.outputs.MultiVectorOutput;
import wres.datamodel.outputs.PairedOutput;
import wres.io.config.ProjectConfigPlus;
import wres.io.writing.commaseparated.CommaSeparatedBoxPlotWriter;
import wres.io.writing.commaseparated.CommaSeparatedDiagramWriter;
import wres.io.writing.commaseparated.CommaSeparatedMatrixWriter;
import wres.io.writing.commaseparated.CommaSeparatedPairedWriter;
import wres.io.writing.commaseparated.CommaSeparatedScoreWriter;
import wres.io.writing.netcdf.NetcdfDoubleScoreWriter;
import wres.io.writing.png.PNGBoxPlotWriter;
import wres.io.writing.png.PNGDiagramWriter;
import wres.io.writing.png.PNGDoubleScoreWriter;
import wres.io.writing.png.PNGDurationScoreWriter;
import wres.io.writing.png.PNGPairedWriter;

/**
 * A processor that generates metric products. Products are generated by registering instances of {@link Consumer} 
 * for particular types and formats of output data. The consumers are stored by {@link MetricOutputGroup}, i.e. by 
 * type of output data. Each store contains the consumers for any formats of output required.
 * 
 * @author james.brown@hydrosolved.com
 * @author jesse.bickel@***REMOVED***
 * @since 0.1
 * @version 0.3
 */

class ProductProcessor implements Consumer<MetricOutputForProjectByTimeAndThreshold>
{

    /**
     * Logger.
     */

    private static final Logger LOGGER = LoggerFactory.getLogger( ProductProcessor.class );

    /**
     * Null output error string
     */

    private static final String NULL_OUTPUT_STRING = "Specify non-null outputs for product generation.";

    /**
     * The project configuration.
     */

    private final ProjectConfig projectConfig;

    /**
     * The augmented project configuration.
     */

    private final ProjectConfigPlus projectConfigPlus;

    /**
     * Any types that should be ignored when processing outputs. This may be used to suppress the generation of partial
     * outputs while a processing pipeline is being completed, or to suppress the generation of intermediate outputs
     * at the end of a processing pipeline (because they have already been produced).
     */

    private Set<MetricOutputGroup> ignoreTheseTypes;

    /**
     * Store of consumers for processing {@link DoubleScoreOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<DoubleScoreOutput>>> doubleScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link DurationScoreOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<DurationScoreOutput>>> durationScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link MultiVectorOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<MultiVectorOutput>>> diagramConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link BoxPlotOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<BoxPlotOutput>>> boxPlotConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link MatrixOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<MatrixOutput>>> matrixConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link PairedOutput} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<PairedOutput<Instant, Duration>>>> pairedConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Build a product processor.
     * 
     * @param projectConfigPlus the project configuration
     * @param ignoreTheseTypes the types that should be ignored when generating outputs (e.g. the empty set)
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    ProductProcessor( final ProjectConfigPlus projectConfigPlus, final Set<MetricOutputGroup> ignoreTheseTypes )
    {
        Objects.requireNonNull( projectConfigPlus,
                                "Specify a non-null configuration for the results processor." );

        Objects.requireNonNull( ignoreTheseTypes, "Specify non-null types to ignore, such as the empty set." );

        this.projectConfigPlus = projectConfigPlus;

        this.projectConfig = this.projectConfigPlus.getProjectConfig();

        this.ignoreTheseTypes = ignoreTheseTypes;

        // Register output consumers
        try
        {
            buildConsumers();
        }
        catch ( ProjectConfigException e )
        {
            throw new WresProcessingException( "While processing the project configurating to write output:", e );
        }
    }

    /**
     * Produces graphical and numerical output for each type available in the input.
     * 
     * @param input the input containing results for one project
     */

    @Override
    public void accept( final MetricOutputForProjectByTimeAndThreshold input )
    {

        try
        {
            // Multivector output available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.MULTIVECTOR )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.MULTIVECTOR ) )
            {
                processDiagramOutputs( input.getMultiVectorOutput() );
            }

            // Box-plot output available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.BOXPLOT )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.BOXPLOT ) )
            {
                processBoxPlotOutputs( input.getBoxPlotOutput() );
            }

            // Matrix output available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.MATRIX )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.MATRIX ) )
            {
                processMatrixOutputs( input.getMatrixOutput() );
            }

            // Ordinary scores available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.DOUBLE_SCORE )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.DOUBLE_SCORE ) )
            {
                processDoubleScoreOutputs( input.getDoubleScoreOutput() );
            }

            // Duration scores available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.DURATION_SCORE )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.DURATION_SCORE ) )
            {
                processDurationScoreOutputs( input.getDurationScoreOutput() );
            }

            // Paired metric output available and not being ignored
            if ( input.hasOutput( MetricOutputGroup.PAIRED )
                 && !ignoreTheseTypes.contains( MetricOutputGroup.PAIRED ) )
            {
                processPairedOutputByInstantDuration( input.getPairedOutput() );
            }
        }
        catch ( final MetricOutputAccessException | IOException e )
        {
            if ( Thread.currentThread().isInterrupted() )
            {
                LOGGER.warn( "Interrupted while processing intermediate results:", e );
            }
            throw new WresProcessingException( "Error while processing intermediate results:", e );
        }
    }

    /**
     * <p>Builds a set of consumers for writing based on the project configuration.</p>
     * 
     * <p>Edit this method as new consumer types are supported by the project configuration.</p>
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildConsumers() throws ProjectConfigException
    {
        // There is one consumer per project for each type, because consumers are built
        // with projects, not destinations. The consumers must iterate destinations.

        // Register consumers for the NetCDF output type
        if ( configNeedsThisTypeOfOutput( DestinationType.NETCDF ) )
        {
            buildNetCDFConsumers();
        }

        // Register consumers for the CSV output type
        if ( configNeedsThisTypeOfOutput( DestinationType.CSV ) )
        {
            buildCommaSeparatedConsumers();
        }

        // Register consumers for the PNG output type
        if ( configNeedsThisTypeOfOutput( DestinationType.PNG ) )
        {
            buildPortableNetworkGraphicsConsumers();
        }

    }

    /**
     * Builds a set of consumers for writing files of Comma Separated Values (CSV).
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildCommaSeparatedConsumers() throws ProjectConfigException
    {

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.MULTIVECTOR ) )
        {
            diagramConsumers.put( DestinationType.CSV,
                                  CommaSeparatedDiagramWriter.of( projectConfig ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.BOXPLOT ) )
        {
            boxPlotConsumers.put( DestinationType.CSV,
                                  CommaSeparatedBoxPlotWriter.of( projectConfig ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.MATRIX ) )
        {
            matrixConsumers.put( DestinationType.CSV,
                                 CommaSeparatedMatrixWriter.of( projectConfig ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.PAIRED ) )
        {
            pairedConsumers.put( DestinationType.CSV,
                                 CommaSeparatedPairedWriter.of( projectConfig ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.DOUBLE_SCORE ) )
        {
            doubleScoreConsumers.put( DestinationType.CSV,
                                      CommaSeparatedScoreWriter.of( projectConfig ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.DURATION_SCORE ) )
        {
            durationScoreConsumers.put( DestinationType.CSV,
                                        CommaSeparatedScoreWriter.of( projectConfig ) );
        }
    }

    /**
     * Builds a set of consumers for writing files in Portable Network Graphics (PNG) format.
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildPortableNetworkGraphicsConsumers() throws ProjectConfigException
    {

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.MULTIVECTOR ) )
        {
            diagramConsumers.put( DestinationType.PNG,
                                  PNGDiagramWriter.of( projectConfigPlus ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.BOXPLOT ) )
        {
            boxPlotConsumers.put( DestinationType.PNG,
                                  PNGBoxPlotWriter.of( projectConfigPlus ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.PAIRED ) )
        {
            pairedConsumers.put( DestinationType.PNG,
                                 PNGPairedWriter.of( projectConfigPlus ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.DOUBLE_SCORE ) )
        {
            doubleScoreConsumers.put( DestinationType.PNG,
                                      PNGDoubleScoreWriter.of( projectConfigPlus ) );
        }

        if ( !ignoreTheseTypes.contains( MetricOutputGroup.DURATION_SCORE ) )
        {
            durationScoreConsumers.put( DestinationType.PNG,
                                        PNGDurationScoreWriter.of( projectConfigPlus ) );
        }
    }

    /**
     * Builds a set of consumers for writing NetCDF output.
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildNetCDFConsumers() throws ProjectConfigException
    {
        // Register consumers for the NetCDF output type
        if ( !ignoreTheseTypes.contains( MetricOutputGroup.DOUBLE_SCORE ) )
        {
            doubleScoreConsumers.put( DestinationType.NETCDF,
                                      NetcdfDoubleScoreWriter.of( projectConfig ) );
        }
    }

    /**
     * Processes {@link MultiVectorOutput}.
     * 
     * @param outputs the outputs to consume
     * @throws IOException if the output could not be consumed
     */

    private void processDiagramOutputs( MetricOutputMultiMapByTimeAndThreshold<MultiVectorOutput> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<MultiVectorOutput>>> next : diagramConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );
            
            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }
    }

    /**
     * Processes {@link BoxPlotOutput}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     */

    private void processBoxPlotOutputs( MetricOutputMultiMapByTimeAndThreshold<BoxPlotOutput> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<BoxPlotOutput>>> next : boxPlotConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );

            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }
    }

    /**
     * Processes {@link MatrixOutput}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     */

    private void processMatrixOutputs( MetricOutputMultiMapByTimeAndThreshold<MatrixOutput> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<MatrixOutput>>> next : matrixConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );

            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }

    }

    /**
     * Processes {@link DoubleScoreOutput}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     */

    private void processDoubleScoreOutputs( MetricOutputMultiMapByTimeAndThreshold<DoubleScoreOutput> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<DoubleScoreOutput>>> next : doubleScoreConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );

            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }

    }

    /**
     * Processes {@link DurationScoreOutput}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     */

    private void processDurationScoreOutputs( MetricOutputMultiMapByTimeAndThreshold<DurationScoreOutput> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<DurationScoreOutput>>> next : durationScoreConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );

            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }
    }

    /**
     * Processes {@link PairedOutput}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     */

    private void
            processPairedOutputByInstantDuration( MetricOutputMultiMapByTimeAndThreshold<PairedOutput<Instant, Duration>> outputs )
                    throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Metadata for logging
        MetricOutputMetadata meta =
                outputs.values().iterator().next().getMetadata();

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<MetricOutputMapByTimeAndThreshold<PairedOutput<Instant, Duration>>>> next : pairedConsumers.entrySet() )
        {
            log( meta, next.getKey(), true );

            // Consume each output
            outputs.values().forEach( next.getValue() );

            log( meta, next.getKey(), false );
        }
    }

    /**
     * Returns true if the project configuration has one or more of the given types
     * 
     * @param type the type of output to look for
     * @return true if the output type is present, false otherwise
     */

    private boolean configNeedsThisTypeOfOutput( DestinationType type )
    {
        Outputs output = projectConfig.getOutputs();
        if ( Objects.isNull( output ) || output.getDestination().isEmpty() )
        {
            LOGGER.debug( "No destinations specified for config {}", projectConfig );
            return false;
        }

        // Interpret default types for graphic and numeric
        Set<DestinationType> allTypes = new HashSet<>();
        allTypes.add( type );
        if ( type == DestinationType.PNG )
        {
            allTypes.add( DestinationType.GRAPHIC );
        }
        if ( type == DestinationType.CSV )
        {
            allTypes.add( DestinationType.NUMERIC );
        }
        // Return true if any destination types appear in allTypes, otherwise false
        return output.getDestination().stream().map( DestinationConfig::getType ).anyMatch( allTypes::contains );
    }

    /**
     * Logs the status of product generation.
     * 
     * @param meta the metadata to assist with logging
     * @param type the output type
     * @param startOfProcess is true to log the start, false to log the end
     */

    private void log( MetricOutputMetadata meta, DestinationType type, boolean startOfProcess )
    {

        String positionString = "Completed ";
        if ( startOfProcess )
        {
            positionString = "Started ";
        }

        if ( Objects.nonNull( meta ) )
        {
            LOGGER.debug( "{} processing of result type '{}' for '{}' "
                          + "at time window {}.",
                          positionString,
                          type,
                          meta.getIdentifier(),
                          meta.getTimeWindow() );
        }
        else
        {
            LOGGER.debug( "{} processing of result type '{}' for unknown data at "
                          + "unknown time window.",
                          positionString,
                          type );
        }
    }

}

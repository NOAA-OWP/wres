package wres.control;

import java.io.Closeable;
import java.io.IOException;
import java.nio.file.Path;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import wres.config.ProjectConfigException;
import wres.config.ProjectConfigPlus;
import wres.config.generated.DestinationConfig;
import wres.config.generated.DestinationType;
import wres.config.generated.ProjectConfig;
import wres.config.generated.ProjectConfig.Outputs;
import wres.datamodel.MetricConstants.StatisticGroup;
import wres.datamodel.statistics.BoxPlotStatistic;
import wres.datamodel.statistics.DoubleScoreStatistic;
import wres.datamodel.statistics.DurationScoreStatistic;
import wres.datamodel.statistics.ListOfStatistics;
import wres.datamodel.statistics.MatrixStatistic;
import wres.datamodel.statistics.MultiVectorStatistic;
import wres.datamodel.statistics.PairedStatistic;
import wres.datamodel.statistics.Statistic;
import wres.datamodel.statistics.StatisticsForProject;
import wres.io.writing.SharedWriters;
import wres.io.writing.commaseparated.CommaSeparatedBoxPlotWriter;
import wres.io.writing.commaseparated.CommaSeparatedDiagramWriter;
import wres.io.writing.commaseparated.CommaSeparatedMatrixWriter;
import wres.io.writing.commaseparated.CommaSeparatedPairedWriter;
import wres.io.writing.commaseparated.CommaSeparatedScoreWriter;
import wres.io.writing.netcdf.NetcdfOutputWriter;
import wres.io.writing.png.PNGBoxPlotWriter;
import wres.io.writing.png.PNGDiagramWriter;
import wres.io.writing.png.PNGDoubleScoreWriter;
import wres.io.writing.png.PNGDurationScoreWriter;
import wres.io.writing.png.PNGPairedWriter;

/**
 * <p>A processor that generates metric products. Products are generated by registering instances of {@link Consumer} 
 * for particular types and formats of output data. The consumers are stored by {@link StatisticGroup}, i.e. by
 * type of output data. Each store contains the consumers for any formats of output required, i.e. any
 * {@link DestinationType}.</p>
 * 
 * <p>Outputs may be written unconditionally, for all types and formats available, or conditionally, for specific 
 * combinations of type and format. Conditional writing is determined on construction with a {@link BiPredicate} 
 * condition on {@link StatisticGroup} and {@link DestinationType}.</p>.
 * 
 * @author james.brown@hydrosolved.com
 * @author jesse.bickel@***REMOVED***
 */

class ProductProcessor implements Consumer<StatisticsForProject>,
                                  Closeable,
                                  Supplier<Set<Path>>
{

    /**
     * Default resolution for writing outputs that contain durations, such as lead durations and time scales. To 
     * change the resolution, change this default.
     */

    static final ChronoUnit DEFAULT_DURATION_UNITS = ChronoUnit.SECONDS;
    
    /**
     * Logger.
     */

    private static final Logger LOGGER = LoggerFactory.getLogger( ProductProcessor.class );

    /**
     * Null output error string
     */

    private static final String NULL_OUTPUT_STRING = "Specify non-null outputs for product generation.";


    /**
     * The resolved project configuration.
     */

    private final ResolvedProject resolvedProject;

    /**
     * Only writes when the condition is true.
     */

    private final BiPredicate<StatisticGroup, DestinationType> writeWhenTrue;

    /**
     * Store of consumers for processing {@link DoubleScoreStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<DoubleScoreStatistic>>> doubleScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link DurationScoreStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<DurationScoreStatistic>>> durationScoreConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link MultiVectorStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<MultiVectorStatistic>>> diagramConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link BoxPlotStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<BoxPlotStatistic>>> boxPlotConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link MatrixStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<MatrixStatistic>>> matrixConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * Store of consumers for processing {@link PairedStatistic} by {@link DestinationType} format.
     */

    private final Map<DestinationType, Consumer<ListOfStatistics<PairedStatistic<Instant, Duration>>>> pairedConsumers =
            new EnumMap<>( DestinationType.class );

    /**
     * List of resources that ProductProcessor opened that it needs to close
     */
    private final List<Closeable> resourcesToClose;

    /**
     * List of potential writers that the ProductProcessor opened that supply
     * a list of paths that those writers actually ended up writing to.
     */
    private final List<Supplier<Set<Path>>> writersToPaths;

    /**
     * Build a product processor that writes unconditionally
     *
     * @param resolvedProject the resolved project
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    ProductProcessor( final ResolvedProject resolvedProject )
    {
        // Write unconditionally
        this( resolvedProject, ( x, y ) -> true );
    }

    /**
     * Build a product processor that writes conditionally.
     *
     * @param resolvedProject the resolved project
     * @param writeWhenTrue the condition under which outputs should be written
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    ProductProcessor( final ResolvedProject resolvedProject,
                      final BiPredicate<StatisticGroup, DestinationType> writeWhenTrue )
    {
        this( resolvedProject, writeWhenTrue, null);
    }    

    /**
     * Build a product processor that writes conditionally.
     * 
     * @param resolvedProject the resolved project
     * @param writeWhenTrue the condition under which outputs should be written
     * @param sharedWriters an optional set of shared writers to consume outputs
     * @throws NullPointerException if any of the inputs are null
     * @throws WresProcessingException if the project is invalid for writing
     */

    ProductProcessor( final ResolvedProject resolvedProject,
                      final BiPredicate<StatisticGroup, DestinationType> writeWhenTrue,
                      final SharedWriters sharedWriters )
    {
        Objects.requireNonNull( resolvedProject,
                                "Specify a non-null configuration for the results processor." );

        Objects.requireNonNull( writeWhenTrue, "Specify a non-null condition to ignore." );

        this.resourcesToClose = new ArrayList<>( 1 );
        this.writersToPaths = new ArrayList<>();
        this.resolvedProject = resolvedProject;
        this.writeWhenTrue = writeWhenTrue;

        // Register output consumers
        try
        {
            // implicitly passing resolvedProject via shared state
            buildConsumers( sharedWriters );
        }
        catch ( ProjectConfigException e )
        {
            throw new WresProcessingException( "While processing the project configuration to write output:", e );
        }

    }

    /**
     * Produces graphical and numerical output for each type available in the input.
     * 
     * @param input the input containing results for one project
     * @throws WresProcessingException if the outputs could not be written
     */

    @Override
    public void accept( final StatisticsForProject input )
    {

        try
        {
            // Multivector output available
            if ( input.hasStatistic( StatisticGroup.MULTIVECTOR ) )
            {
                processDiagramOutputs( input.getMultiVectorStatistics() );
            }

            // Box-plot output available
            if ( input.hasStatistic( StatisticGroup.BOXPLOT ) )
            {
                processBoxPlotOutputs( input.getBoxPlotStatistics() );
            }

            // Matrix output available
            if ( input.hasStatistic( StatisticGroup.MATRIX ) )
            {
                processMatrixOutputs( input.getMatrixStatistics() );
            }

            // Ordinary scores available
            if ( input.hasStatistic( StatisticGroup.DOUBLE_SCORE ) )
            {
                processDoubleScoreOutputs( input.getDoubleScoreStatistics() );
            }

            // Duration scores available
            if ( input.hasStatistic( StatisticGroup.DURATION_SCORE ) )
            {
                processDurationScoreOutputs( input.getDurationScoreStatistics() );
            }

            // Paired metric output available
            if ( input.hasStatistic( StatisticGroup.PAIRED ) )
            {
                processPairedOutputByInstantDuration( input.getPairedStatistics() );
            }
        }
        catch ( InterruptedException e)
        {
            String message = "Interrupted while processing intermediate results:";
            LOGGER.warn( message, e );
            Thread.currentThread().interrupt();
            
            throw new WresProcessingException( message, e );
        }
        catch ( IOException e )
        {
            throw new WresProcessingException( "Error while processing intermediate results:", e );
        }
    }

    private List<Supplier<Set<Path>>> getWritersToPaths()
    {
        return Collections.unmodifiableList( this.writersToPaths );
    }

    /**
     * @return paths actually written to by this processor so far.
     */
    @Override
    public Set<Path> get()
    {
        Set<Path> paths = new HashSet<>();

        for ( Supplier<Set<Path>> supplierOfPaths : this.getWritersToPaths() )
        {
            paths.addAll( supplierOfPaths.get() );
        }

        LOGGER.debug( "Returning paths from ProductProcessor {}: {}", this, paths );
        return Collections.unmodifiableSet( paths );
    }

    /**
     * <p>Builds a set of consumers for writing based on the project configuration.</p>
     * 
     * <p>Edit this method as new consumer types are supported by the project configuration.</p>
     * 
     * @param sharedWriters an optional set of shared writers
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildConsumers( SharedWriters sharedWriters )
    {
        // There is one consumer per project for each type, because consumers are built
        // with projects, not destinations. The consumers must iterate destinations.

        // Register consumers for the NetCDF output type
        if ( configNeedsThisTypeOfOutput( DestinationType.NETCDF ) )
        {
            // implicitly passing resolvedProject via shared state
            buildNetCDFConsumers( sharedWriters );
            //buildNetCDFConsumers();
        }

        // Register consumers for the CSV output type
        if ( configNeedsThisTypeOfOutput( DestinationType.CSV ) )
        {
            buildCommaSeparatedConsumers();
        }

        // Register consumers for the PNG output type
        if ( configNeedsThisTypeOfOutput( DestinationType.PNG ) )
        {
            buildPortableNetworkGraphicsConsumers();
        }

    }

    /**
     * Builds a set of consumers for writing files of Comma Separated Values (CSV).
     * Also builds a set of writers to ask for paths written to later.
     * 
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildCommaSeparatedConsumers()
    {
        ProjectConfig projectConfig = this.getProjectConfig();
        Path outputDirectory = this.getResolvedProject().getOutputDirectory();

        // Build the consumers conditionally
        if ( writeWhenTrue.test( StatisticGroup.MULTIVECTOR, DestinationType.CSV ) )
        {
            CommaSeparatedDiagramWriter diagramWriter =
                    CommaSeparatedDiagramWriter.of( projectConfig,
                                                    DEFAULT_DURATION_UNITS,
                                                    outputDirectory );
            diagramConsumers.put( DestinationType.CSV,
                                  diagramWriter );
            this.writersToPaths.add( diagramWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.BOXPLOT, DestinationType.CSV ) )
        {
            CommaSeparatedBoxPlotWriter boxPlotWriter =
                    CommaSeparatedBoxPlotWriter.of( projectConfig,
                                                    DEFAULT_DURATION_UNITS,
                                                    outputDirectory );
            boxPlotConsumers.put( DestinationType.CSV,
                                  boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.MATRIX, DestinationType.CSV ) )
        {
            CommaSeparatedMatrixWriter matrixWriter =
                    CommaSeparatedMatrixWriter.of( projectConfig,
                                                   DEFAULT_DURATION_UNITS,
                                                   outputDirectory );
            matrixConsumers.put( DestinationType.CSV,
                                 matrixWriter );
            this.writersToPaths.add( matrixWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.PAIRED, DestinationType.CSV ) )
        {
            pairedConsumers.put( DestinationType.CSV,
                                 CommaSeparatedPairedWriter.of( projectConfig,
                                                                DEFAULT_DURATION_UNITS,
                                                                outputDirectory ) );
        }

        if ( writeWhenTrue.test( StatisticGroup.DOUBLE_SCORE, DestinationType.CSV ) )
        {
            CommaSeparatedScoreWriter<DoubleScoreStatistic> doubleScoreWriter =
                    CommaSeparatedScoreWriter.of( projectConfig,
                                                  DEFAULT_DURATION_UNITS,
                                                  outputDirectory );
            doubleScoreConsumers.put( DestinationType.CSV,
                                      doubleScoreWriter );
            this.writersToPaths.add( doubleScoreWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.DURATION_SCORE, DestinationType.CSV ) )
        {
            CommaSeparatedScoreWriter<DurationScoreStatistic> durationScoreWriter =
                    CommaSeparatedScoreWriter.of( projectConfig,
                                                  DEFAULT_DURATION_UNITS,
                                                  outputDirectory );
            durationScoreConsumers.put( DestinationType.CSV,
                                        durationScoreWriter );
            this.writersToPaths.add( durationScoreWriter );
        }
    }

    /**
     * Builds a set of consumers for writing files in Portable Network Graphics (PNG) format.
     *
     * @throws ProjectConfigException if the project configuration is invalid for writing
     */

    private void buildPortableNetworkGraphicsConsumers()
    {
        ProjectConfigPlus projectConfigPlus = this.getProjectConfigPlus();
        Path outputDirectory = this.getResolvedProject().getOutputDirectory();

        // Build the consumers conditionally
        if ( writeWhenTrue.test( StatisticGroup.MULTIVECTOR, DestinationType.PNG ) )
        {
            PNGDiagramWriter diagramWriter = PNGDiagramWriter.of( projectConfigPlus,
                                                                  DEFAULT_DURATION_UNITS,
                                                                  outputDirectory );
            diagramConsumers.put( DestinationType.PNG,
                                  diagramWriter );
            this.writersToPaths.add( diagramWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.BOXPLOT, DestinationType.PNG ) )
        {
            PNGBoxPlotWriter boxPlotWriter = PNGBoxPlotWriter.of( projectConfigPlus,
                                                                  DEFAULT_DURATION_UNITS,
                                                                  outputDirectory);
            boxPlotConsumers.put( DestinationType.PNG,
                                  boxPlotWriter );
            this.writersToPaths.add( boxPlotWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.PAIRED, DestinationType.PNG ) )
        {
            PNGPairedWriter pairedWriter = PNGPairedWriter.of( projectConfigPlus,
                                                               DEFAULT_DURATION_UNITS,
                                                               outputDirectory );
            pairedConsumers.put( DestinationType.PNG,
                                 pairedWriter );
            this.writersToPaths.add( pairedWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.DOUBLE_SCORE, DestinationType.PNG ) )
        {
            PNGDoubleScoreWriter doubleScoreWriter =
                    PNGDoubleScoreWriter.of( projectConfigPlus,
                                             DEFAULT_DURATION_UNITS,
                                             outputDirectory );
            doubleScoreConsumers.put( DestinationType.PNG,
                                      doubleScoreWriter );
            this.writersToPaths.add( doubleScoreWriter );
        }

        if ( writeWhenTrue.test( StatisticGroup.DURATION_SCORE, DestinationType.PNG ) )
        {
            PNGDurationScoreWriter durationScoreWriter =
                    PNGDurationScoreWriter.of( projectConfigPlus,
                                               DEFAULT_DURATION_UNITS,
                                               outputDirectory );
            durationScoreConsumers.put( DestinationType.PNG,
                                        durationScoreWriter );
            this.writersToPaths.add( durationScoreWriter );
        }
    }

    private void buildNetCDFConsumers( SharedWriters sharedWriters )
    {
        ProjectConfig projectConfig = this.getProjectConfigPlus().getProjectConfig();

        // Build the consumers conditionally
        if ( Objects.nonNull( sharedWriters )
             && sharedWriters.contains( StatisticGroup.DOUBLE_SCORE, DestinationType.NETCDF ) )
        {
            LOGGER.debug( "There are shared netcdf consumers for {}", this );
            this.doubleScoreConsumers.put( DestinationType.NETCDF,
                                           sharedWriters );
            this.writersToPaths.add( sharedWriters );
            // Not in charge of closing the sharedwriters, that is out at top.
        }
        else if ( writeWhenTrue.test( StatisticGroup.DOUBLE_SCORE, DestinationType.NETCDF ) )
        {
            LOGGER.debug( "There are netcdf consumers for {}", this );
            NetcdfOutputWriter netcdfOutputWriter = NetcdfOutputWriter.of( projectConfig,
                                                                           DEFAULT_DURATION_UNITS,
                                                                           this.getResolvedProject()
                                                                               .getOutputDirectory() );
            doubleScoreConsumers.put( DestinationType.NETCDF,
                                      netcdfOutputWriter );
            this.writersToPaths.add( netcdfOutputWriter );
            this.resourcesToClose.add( netcdfOutputWriter );
        }
        else
        {
            LOGGER.debug( "There are NOT netcdf consumers for {}", this );
        }
    }


    /**
     * Processes {@link MultiVectorStatistic}.
     * 
     * @param outputs the outputs to consume
     * @throws NullPointerException if the input is null
     */

    private void processDiagramOutputs( ListOfStatistics<MultiVectorStatistic> outputs )
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<MultiVectorStatistic>>> next : diagramConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.MULTIVECTOR, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link BoxPlotStatistic}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     * @throws NullPointerException if the input is null
     */

    private void processBoxPlotOutputs( ListOfStatistics<BoxPlotStatistic> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<BoxPlotStatistic>>> next : boxPlotConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.BOXPLOT, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link MatrixStatistic}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     * @throws NullPointerException if the input is null
     */

    private void processMatrixOutputs( ListOfStatistics<MatrixStatistic> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<MatrixStatistic>>> next : matrixConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.MATRIX, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }

    }

    /**
     * Processes {@link DoubleScoreStatistic}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     * @throws NullPointerException if the input is null
     */

    private void processDoubleScoreOutputs( ListOfStatistics<DoubleScoreStatistic> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<DoubleScoreStatistic>>> next : doubleScoreConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.DOUBLE_SCORE, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }

    }

    /**
     * Processes {@link DurationScoreStatistic}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     * @throws NullPointerException if the input is null
     */

    private void processDurationScoreOutputs( ListOfStatistics<DurationScoreStatistic> outputs )
            throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<DurationScoreStatistic>>> next : durationScoreConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.DURATION_SCORE, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Processes {@link PairedStatistic}.
     * 
     * @param outputs the output to consume
     * @throws IOException if the output could not be consumed
     * @throws NullPointerException if the input is null
     */

    private void
            processPairedOutputByInstantDuration( ListOfStatistics<PairedStatistic<Instant, Duration>> outputs )
                    throws IOException
    {
        Objects.requireNonNull( outputs, NULL_OUTPUT_STRING );

        // Iterate through the consumers
        for ( Entry<DestinationType, Consumer<ListOfStatistics<PairedStatistic<Instant, Duration>>>> next : pairedConsumers.entrySet() )
        {
            // Consume conditionally
            if ( writeWhenTrue.test( StatisticGroup.PAIRED, next.getKey() ) )
            {
                log( outputs, next.getKey(), true );

                // Consume the output
                next.getValue().accept( outputs );

                log( outputs, next.getKey(), false );
            }
        }
    }

    /**
     * Returns true if the project configuration has one or more of the given types
     * 
     * @param type the type of output to look for
     * @return true if the output type is present, false otherwise
     */

    private boolean configNeedsThisTypeOfOutput( DestinationType type )
    {
        ProjectConfig projectConfig = this.getProjectConfig();
        Outputs output = projectConfig.getOutputs();
        if ( Objects.isNull( output ) || output.getDestination().isEmpty() )
        {
            LOGGER.debug( "No destinations specified for config {}", projectConfig );
            return false;
        }

        // Interpret default types for graphic and numeric
        Set<DestinationType> allTypes = new HashSet<>();
        allTypes.add( type );
        if ( type == DestinationType.PNG )
        {
            allTypes.add( DestinationType.GRAPHIC );
        }
        if ( type == DestinationType.CSV )
        {
            allTypes.add( DestinationType.NUMERIC );
        }
        // Return true if any destination types appear in allTypes, otherwise false
        return output.getDestination().stream().map( DestinationConfig::getType ).anyMatch( allTypes::contains );
    }


    /**
     * Close resources that ProductProcessor opened
     */

    @Override
    public void close()
    {
        for ( Closeable resource : this.resourcesToClose )
        {
            LOGGER.debug( "About to close {}", resource );

            try
            {
                resource.close();
            }
            catch ( IOException ioe )
            {
                // Not much we can do at this point. We tried to close, but
                // we need to try to close all the other resources too before
                // the software exits.
                LOGGER.warn( "Unable to close resource {}", resource, ioe );
            }
        }
    }


    /**
     * Logs the status of product generation.
     * 
     * @param <T> the output type
     * @param output the output
     * @param type the output type
     * @param startOfProcess is true to log the start, false to log the end
     */

    private <T extends Statistic<?>> void
            log( ListOfStatistics<T> output, DestinationType type, boolean startOfProcess )
    {

        String positionString = "Completed ";
        if ( startOfProcess )
        {
            positionString = "Started ";
        }

        if ( ! output.getData().isEmpty() )
        {
            LOGGER.debug( "{} processing of result type '{}' for '{}' "
                          + "at time window {}.",
                          positionString,
                          type,
                          output.getData().get( 0 ).getMetadata().getSampleMetadata().getIdentifier(),
                          output.getData().get( 0 ).getMetadata().getSampleMetadata().getTimeWindow() );
        }
        else
        {
            LOGGER.debug( "{} processing of result type '{}' for unknown data at "
                          + "unknown time window.",
                          positionString,
                          type );
        }
    }


    /**
     * @return the resolved project
     */

    private ResolvedProject getResolvedProject()
    {
        return this.resolvedProject;
    }

    /**
     * @return the project config with more (2nd order project config)
     */

    private ProjectConfigPlus getProjectConfigPlus()
    {
        return this.getResolvedProject()
                   .getProjectConfigPlus();
    }

    /**
     * @return the project config
     */

    private ProjectConfig getProjectConfig()
    {
        return this.getResolvedProject()
                   .getProjectConfig();
    }
}

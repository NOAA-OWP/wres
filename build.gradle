import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.nio.file.StandardCopyOption
import java.time.ZoneId

/* Used by gradle plugins outside the official gradle plugins repository */
buildscript
{
    repositories
    {
        mavenCentral()
    }
    dependencies
    {
        // For markdown -> html
        classpath 'com.atlassian.commonmark:commonmark:0.15.1'
        // To create a unified javadoc across submodules and top-level module:
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

/* Gradle plugins available in the official gradle plugins repository */
plugins
{
    // Static analysis tool sonarqube client
    id 'org.sonarqube' version '3.0'

    //id 'com.github.jacobono.jaxb' version '1.3.5'
    // Above is unmaintained, less gradle-y, below fork has several improvements
    id 'org.openrepose.gradle.plugins.jaxb' version '2.5.0'

    // For ability to use git ids for versioning jar files:
    id 'org.ajoberstar.grgit' version '4.0.2'

    // To compile user documentation (not working: blows up on compileMarkdown)
    //id 'org.uulib.gradle.markdown' version '0.0.1'

    // To generate de/serialization classes for message bodies
    id 'com.google.protobuf' version '0.8.10'

    // To create trusted certificate files (.jks aka cacerts) from dir of .pem
    // (Not working: not friendly to our directory structure nor submodules)
    //id 'de.chkpnt.truststorebuilder' version '0.2.57'

    // To print junit test reports to the console in addition to html, so that
    // remote developers can see detailed test feedback without launching a
    // browser. See #61601
    id 'com.github.ksoichiro.console.reporter' version '0.6.2'

    // To discover library versions with known vulnerabilities
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    
    // Task to assist in downloading artifacts
    id "de.undercouch.download" version "4.0.4"
}

repositories
{
    mavenCentral()
    maven 
    {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/"// 
    }
}


subprojects
{
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    // Each module does not need a version update unless code in it has changed.
    def gitCommit = grgit.log(paths: [project.name], maxCommits:1).find()
    // Null check in case there is a new module with no history
    if( gitCommit != null )
    {
        def gitCommitId = gitCommit.id;
        def gitCommitDate = gitCommit.dateTime.withZoneSameInstant( ZoneId.of( "UTC" ) )

        // ...Or if this build script which controls dependencies has changed.
        def gitCommitOfThis = grgit.log( paths: ['build.gradle'], maxCommits:1 ).find()
        def gitCommitIdOfThis = gitCommitOfThis.id
        def gitCommitDateOfThis = gitCommitOfThis.dateTime.withZoneSameInstant( ZoneId.of( "UTC" ) )

        version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6]

        // If the build script tip commit has a later date, use that instead.
        // This means we have multiple unneeded version updates of submodule
        // versions but will not have the converse. The version will change when
        // changes really did happen, whether to the module or this build script.
        def versionOfThis = gitCommitDateOfThis.format( 'yyyyMMdd' ) + '-' + gitCommitIdOfThis[0..6]

        if ( gitCommitDateOfThis.isAfter( gitCommitDate ) )
        {
            version = versionOfThis
        }
    }
    // Default version string for new module with no history
    else
    {
        String currentDate = OffsetDateTime.now( ZoneOffset.UTC ).format('yyyyMMdd' )
        version = currentDate + '-0000000'
    }

    // Whenever there are local changes, flag the version with a "-dev" suffix.
    // If "-dev" shows up in a version in production, either a bad artifact
    // made it into production or there is a bug in this logic. In either case,
    // the response is to make sure that a clean build producing a version with
    // no "-dev" occurs and to put that artifact into production.
    def gitIsClean = grgit.status().isClean()

    if (!gitIsClean)
    {
        version = version + '-dev'
    }

    sourceSets
    {
        main
        {
            java
            {
                // Standard sources in src. The dist being here is for eclipse
                // purposes. Eclipse needs the conf files to be labeled as
                // source or library or class in order to land on its runtime
                // or debugtime classpath.

                // It seems unintuitive but somehow works because there are no
                // actual java files inside the conf directory, this just
                // causes the files to show up on eclipse's classpath at
                // runtime or debugtime.
                // https://stackoverflow.com/questions/18183677/gradle-add-folder-to-eclipse-classpath#18184414
                srcDirs = ['src', 'dist/lib/conf']
            }

            // "resources" here end up included inside the jar.
            // For non-jarred resources such as config files, see distributions
            // section inside wres-core, as well as startScripts section.
            resources
            {
                srcDirs = ['nonsrc']
            }
        }

        test
        {
            java
            {
                srcDirs = ['test']
            }
            resources
            {
                srcDirs = ['testNonsrc']
            }
        }
    }

    repositories
    {
        mavenCentral()
        maven 
        {
            url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/"// 
            
        }
    }

    test
    {
        maxHeapSize = "2180m"
        testLogging.showStandardStreams = true
    }

    jar
    {
        // toward reproducible builds:
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        // version number should be included
        manifest
        {
            attributes("Implementation-Title": "Water Resources Evaluation Service",
                       "Implementation-Version": version)
        }
    }
}

project(':wres-util')
{
    dependencies
    {
        compile project(':wres-datamodel')

        compile 'org.slf4j:slf4j-api:1.8.0-beta4'

        compile 'com.google.guava:guava:29.0-jre'
        compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

        compile('edu.ucar:cdm-core:5.3.2')
        {
            // Because we use slf4j, not jcl:
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        // Update the org.apache.httpcomponents modules depended upon by cdm
        compile 'org.apache.httpcomponents:httpclient:4.5.12'
        compile 'org.apache.httpcomponents:httpcore:4.4.13'
        compile 'org.apache.httpcomponents:httpmime:4.5.12'

        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'

        // Because cdm uses apache commons logging, bridge to slf4j
        runtime 'org.slf4j:jcl-over-slf4j:1.8.0-beta4'

        testCompile 'junit:junit:4.13'

        // Mocking help
        testCompile 'org.mockito:mockito-core:3.3.3'

        // super-duper mocking help (mocking static, private methods)
        testCompile 'org.powermock:powermock-api-mockito2:2.0.7'
        testCompile 'org.powermock:powermock-module-junit4:2.0.7'

        testCompile files('../libs/external/EVS.jar')
    }
}

project(':wres-system')
{
    dependencies
    {
        compile project(':wres-util')
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'

        compile 'com.google.guava:guava:29.0-jre'

        // to use native postgres copy, need this on compile, otherwise runtime
        compile 'org.postgresql:postgresql:42.2.12'
        compile group: 'org.liquibase', name: 'liquibase-core', version: '3.9.0'

        // connection pooling:
        compile 'com.zaxxer:HikariCP:3.4.5'

        // Because org.postgresql:postgresql uses JUL logging, bridge it, here
        // at compile time because we need to expose a class to JUL.
        compile 'org.slf4j:jul-to-slf4j:1.8.0-beta4'

        //JB @ 02/16/17
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: '29.0-jre'

        testCompile 'junit:junit:4.13'

        // Use mockserver to test certificate utilities
        testCompile 'org.mock-server:mockserver-netty:5.10'
    }

    test
    {
        // Set the socket timeout for tests involving mockserver to 120s
        systemProperties = [ "mockserver.maxSocketTimeout": 120000 ]
    }
}

project(':wres-datamodel')
{
    dependencies
    {
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile 'org.apache.commons:commons-lang3:3.9'
        compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
        compile project(':wres-config')

        testCompile 'junit:junit:4.13'

        testCompile files('../libs/external/EVS.jar')
    }
}

project(':wres-io')
{
    dependencies
    {
        compile project(':wres-util')
        compile project(':wres-system')
        compile project(':wres-datamodel')
        compile project(':wres-config')
        compile project(':wres-vis')
        compile project(':wres-grid')

        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

        // JSON deserialization uses jackson directly. Specify recent version.
        compile 'com.fasterxml.jackson.core:jackson-databind:2.10.4'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.10.4'
        compile 'com.fasterxml.jackson.core:jackson-core:2.10.4'

        // For Java 8 java.time support
        compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.4'

        compile('edu.ucar:cdm-core:5.3.2')
        {
            // Because we use slf4j, not jcl:
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        compile group: 'org.apache.commons', name: 'commons-compress', version: '1.20'

        // to use native postgres copy, need this on compile, otherwise runtime
        compile 'org.postgresql:postgresql:42.2.12'

        // connection pooling:
        compile 'com.zaxxer:HikariCP:3.4.5'

        // wres.io.utilities uses javax.json.* imports
        compile 'org.glassfish:javax.json:1.1.4'

        // Easier MD5
        compile 'commons-codec:commons-codec:1.14'

        // Better-than-Java-11's HTTP client
        compile 'com.squareup.okhttp3:okhttp:4.7.2'

        // Because org.postgresql:postgresql uses JUL logging, bridge at runtime
        runtime 'org.slf4j:jul-to-slf4j:1.8.0-beta4'

        // Because cdm and aws sdk uses apache commons logging, bridge to slf4j
        runtime 'org.slf4j:jcl-over-slf4j:1.8.0-beta4'

        //JB @ 02/16/17
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: '29.0-jre'

        testCompile 'junit:junit:4.13'

        testCompile group: 'org.liquibase', name: 'liquibase-core', version: '3.9.0'

        // Mocking help
        testCompile 'org.mockito:mockito-core:3.3.3'

        // TODO: remove dependence on powermock, remove powermock completely.
        testCompile 'org.powermock:powermock-api-mockito2:2.0.7'
        testCompile 'org.powermock:powermock-module-junit4:2.0.7'

        // Use mockserver as a mock server for mock API responses
        testCompile 'org.mock-server:mockserver-netty:5.10'

        // Use H2 for truly embedded SQL db
        testCompile 'com.h2database:h2:1.4.200'
    }

    test
    {
        // Set the socket timeout for tests involving mockserver to 120s
        systemProperties = [ "mockserver.maxSocketTimeout": 120000,
                             "ucar.unidata.io.http.maxReadCacheSize": 200000,
                             "ucar.unidata.io.http.httpBufferSize": 200000 ]
    }


    // The liquibase changesets are in the root project(!?), give wres-io access
    // to those changesets on the test time classpath.
    sourceSets
    {
        test
        {
            resources
            {
                // Flatten the contents of both testNonsrc (that every
                // subproject aka module has) and root's dist/lib/conf
                // (including database dir) onto the classpath.
                // The reason to do this is that newer liquibase scripts can
                // start their existence at test-time, but both those new and
                // existing in production are accessible at test time.
                // The reason for awkward phrasing here is that we want the
                // classpath path to be exactly 'database/[changeset].xml', not
                // flattened out to '[changeset].xml'.
                srcDirs += '../dist/lib/conf'

                // Avoid inclusion of wresconfig.xml because the db settings
                // from that config would be (unsuccessfully) used at test time.
                excludes += 'wresconfig.xml'
            }
        }
    }
}

project(':wres-metrics')
{
    dependencies
    {
        compile project(':wres-datamodel')
        compile project(':wres-config')
        compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'

        testCompile project (':wres-datamodel')
        testCompile 'junit:junit:4.13'
        testCompile 'org.mockito:mockito-core:3.3.3'
    }
}

project(':wres-statistics')
{
    apply plugin: 'com.google.protobuf'

    def generatedDir = "${project.projectDir}/src"

    protobuf
    {
        // Automatically download and use the correct protobuf compiler
        protoc
        {
            artifact = 'com.google.protobuf:protoc:3.12.2'
        }
        // So all IDEs/editors can see generated files, use actual src dir:
        generatedFilesBaseDir = "${generatedDir}"
    }

    sourceSets
    {
        main
        {
            // Deviate from our typical source tree here to work around plugin's
            // inflexibility on paths plus IDEs handling generated code, see
            // https://github.com/google/protobuf-gradle-plugin/issues/190
            // The different srcDirs seems to work for eclipse, not IDEA.
            // But somehow a bunch of weird src tree shows up too.
            java
            {
                srcDirs = ['src/main/java']
            }

            // Tell protobuf plugin where to find .proto schema files:
            proto
            {
                srcDirs = ['nonsrc']
            }
        }
    }
    
    javadoc
    {
        // Protobuf does not appear to generate javadoc, so neither will we.
        excludes = ['**/generated/*.java']
    }

    // Version of the flatbuffer compiler to use
    String compilerVersion = '1.12.0.1'

    // Create N java sources from N flatbuffer (fbs) sources
    task createJavaSourcesFromFlatbuffers( dependsOn: 'prepareFlatbufferCompiler' ) {
                
        doFirst
        {
            // Delete any existing sources generated from fbs only
            File generatedPath = new File("${project.projectDir}/src/main/java/wres/statistics/generated/flatbuffers"); 
            generatedPath.deleteDir();
            
            // Confirm that the flatc compiler was downloaded and unpacked
            List<String> files = new FileNameFinder().getFileNames("${buildDir}/bin","flatc*");

            if( files.isEmpty() )
            {
                throw new GradleException( "Could not locate the flatbuffer compiler at the expected path: " 
                                             + "${buildDir}/bin" );
            }
        }
        doLast
        {
            // Compile each fbs source into a java source
            String sources = "${project.projectDir}/nonsrc/flatbuffers";
            File baseDir = new File(sources);
            List<File> files = baseDir.listFiles();
            // The compiler, which was downloaded and unpacked to ${buildDir}/bin 
            String flatcPath = "${buildDir}/bin/flatc";
            String generatedPathString = "${project.projectDir}/src/main/java";
            
            // Iterate the fbs sources
            files.each { File nextSourcePath ->
                String sourceString = nextSourcePath.toString();

                // Create java sources and wait until this process is complete, redirecting output
                ProcessBuilder builder = new ProcessBuilder( flatcPath, '-o', generatedPathString, sourceString, '--java' );              
                int exitCode = builder.redirectErrorStream( true )
                                      .redirectOutput( ProcessBuilder.Redirect.INHERIT )
                                      .start()
                                      .waitFor();
                                      
                if( exitCode !=0 )
                {
                    String commandString = flatcPath + ' -o ' + generatedPathString + ' ' + sourceString + ' --java';
                
                    throw new GradleException( "Received a non-zero exit code while executing: " + commandString );
                }
            }      
        }
    }
    
    // Prepares the flatbuffer compiler by downloading and unzipping, as needed
    task prepareFlatbufferCompiler( type: Copy, dependsOn: 'downloadFlatbufferCompiler' ) {
    
        if( isWindows() )
        {
            String packedSource = "${buildDir}/flatbuffers-compiler-" + compilerVersion + "-distribution-windows.zip" 
       	    File zipFile = file( packedSource )
       	    from zipTree( zipFile )
            into buildDir
        }
        else if ( isEl6Linux() )
        {
            // Special case, RHEL6/CentOS6 uses old glibc, use checked-in flatc.
            // Remove this when RHEL6/CentOS6 is retired, isLinux() should work.
            from "${project.projectDir}/bin/el6/flatc"
            into "${buildDir}/bin"
        }
        else if ( isEl7Linux() )
        {
            // Special case, RHEL7/CentOS7 uses old glibc, use checked-in flatc.
            // Remove this when RHEL7/CentOS7 is retired, below should work.
            from "${project.projectDir}/bin/el7/flatc"
            into "${buildDir}/bin"
        }
        else if( isLinux() )
        {
            String packedSource = "${buildDir}/flatbuffers-compiler-" + compilerVersion + "-distribution-linux.tar.gz" 
            from tarTree( resources.gzip( packedSource ) )
            into buildDir
        }
        else if( isMac() )
        {
            String packedSource = "${buildDir}/flatbuffers-compiler-" + compilerVersion + "-distribution-osx.tar.gz" 
            from tarTree( resources.gzip( packedSource ) )
            into buildDir
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
    }
    
    // Download the appropriate executable for the OS, if required
    task downloadFlatbufferCompiler( type: Download ) {

        if ( isWindows() ) {
            String url = "https://repo1.maven.org/maven2/com/github/davidmoten/flatbuffers-compiler/" + 
                          compilerVersion + 
                          "/flatbuffers-compiler-" + 
                          compilerVersion + 
                          "-distribution-windows.zip"
            src url
        }
        else if( isLinux() )
        {
            String url = "https://repo1.maven.org/maven2/com/github/davidmoten/flatbuffers-compiler/" + 
                          compilerVersion + 
                          "/flatbuffers-compiler-" + 
                          compilerVersion + 
                          "-distribution-linux.tar.gz"
            src url
        } 
        else if( isMac() )
        {
            String url = "https://repo1.maven.org/maven2/com/github/davidmoten/flatbuffers-compiler/" + 
                          compilerVersion + 
                          "/flatbuffers-compiler-" + 
                          compilerVersion + 
                          "-distribution-osx.tar.gz"
            src url
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
       
        // TODO: download checksum, compute local checksum, assert equivalence
        
        dest buildDir
        overwrite false
    }
    
    // Create generated java sources before compiling java classes
    compileJava.dependsOn createJavaSourcesFromFlatbuffers

    // Create N java sources from N cap'n proto (capnp) sources
    task createJavaSourcesFromCapnproto( dependsOn: ['prepareCapnprotoCompiler', 'prepareCapnprotoCompilerPlugin'] ) {
        
        doFirst
        {
            // Delete any existing sources generated from fbs only
            File generatedPath = new File("${project.projectDir}/src/main/java/wres/statistics/generated/capnp"); 
            generatedPath.deleteDir();
            // Create afresh
            generatedPath.mkdirs();
            
            // Confirm that the cap'n proto compiler was downloaded and unpacked
            List<String> files = new FileNameFinder().getFileNames("${buildDir}/bin","capnp*");

            if( files.isEmpty() )
            {
                throw new GradleException( "Could not find the Cap'n proto executables in ${buildDir}/bin." );
            }
        }
        
        doLast
        {
            // Compile each capnp source into a java source
            String sources = "${project.projectDir}/nonsrc/capnproto";
            File baseDir = new File( sources );
            List<File> files = baseDir.listFiles();
            // The compiler, which was downloaded and unpacked to ${buildDir}/bin 
            String capnPath = "${buildDir}/bin/capnp";
            // The compiler plugin for java
            String capnJavaPath = "${buildDir}/bin/capnpc-java";
            String generatedPathString = "${project.projectDir}/src/main/java/wres/statistics/generated/capnp";
            
            // Iterate the capnp sources
            files.each { File nextSourcePath ->
                String sourceString = nextSourcePath.toString();
                
                // Process all files except the java plugin file
                if( ! nextSourcePath.getName().equals( "java.capnp" ) )
                {
                    // Create java sources and wait until this process is complete, redirecting output
                    ProcessBuilder builder = new ProcessBuilder( capnPath, 'compile', '-o', capnJavaPath + ":" + 
                                                                 generatedPathString, '--src-prefix', sources, 
                                                                 sourceString );              
                    int exitCode = builder.redirectErrorStream( true )
                                          // Redirects to a log file
                                          //.redirectOutput( ProcessBuilder.Redirect.to( new File( project.buildDir, "capnp.log" ) ) )
                                          .redirectOutput( ProcessBuilder.Redirect.INHERIT )
                                          .start()
                                          .waitFor();
                                                      
                    if( exitCode !=0 )
                    {
                        String commandString = capnPath + ' compile -o' + capnJavaPath + ':' + generatedPathString + 
                                               ' --src-prefix ' + sources + ' ' + sourceString;
                
                        throw new GradleException( "Received a non-zero exit code while executing: " + commandString );
                    }
                }
            }      
        }
    }

    // Prepares the Cap'n proto compiler by downloading and unzipping, as needed
    task prepareCapnprotoCompiler( type: Copy, dependsOn: 'downloadCapnprotoCompiler' ) {
    
        if( isWindows() )
        {        
            String packedSource = "${buildDir}/capnproto-c++-win32-0.8.0.zip" 
            File zipFile = file( packedSource )
            from zipTree( zipFile )
            into "${buildDir}/bin"
            include "capnproto-tools-win32-0.8.0/**"
            includeEmptyDirs = false
            eachFile { fcd ->
                fcd.relativePath = new RelativePath( true, fcd.relativePath.segments.drop( 1 ) )
            }
        }
        else if ( isEl6Linux() )
        {
        }
        else if ( isEl7Linux() )
        {
        }
        else if( isLinux() )
        {
        }
        else if( isMac() )
        {
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
    }    
    
    // Prepares the Cap'n proto compiler by downloading and unzipping, as needed
    task prepareCapnprotoCompilerPlugin( type: Copy, dependsOn: 'downloadCapnprotoCompilerPlugin' ) {
    
        if( isWindows() )
        {        
            String packedSourcePlugin = "${buildDir}/capnpc-java.exe.zip" 
            File zipFilePlugin = file( packedSourcePlugin )
            from zipTree( zipFilePlugin )
            into "${buildDir}/bin"
        }
        else if ( isEl6Linux() )
        {
        }
        else if ( isEl7Linux() )
        {
        }
        else if( isLinux() )
        {
        }
        else if( isMac() )
        {
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
    }     

    // Download the appropriate Cap'n proto java plugin executable for the OS, if required
    task downloadCapnprotoCompilerPlugin( type: Download ) {

        if ( isWindows() ) {
            String url = "https://dwrensha.ws/capnproto/capnpc-java.exe.zip"
            src url
        }
        else if( isLinux() )
        {
        } 
        else if( isMac() )
        {
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
       
        // TODO: download checksum, compute local checksum, assert equivalence
        
        dest buildDir
        overwrite false
    }
    
    // Download the appropriate Cap'n proto executable for the OS, if required
    task downloadCapnprotoCompiler( type: Download ) {

        if ( isWindows() ) {
            String url = "https://capnproto.org/capnproto-c++-win32-0.8.0.zip"
            src url
        }
        else if( isLinux() )
        {
        } 
        else if( isMac() )
        {
        }
        else
        {
            String name = System.properties[ 'os.name' ];
            throw new GradleException( "Unrecognized operating system '" + name + "'." );
        }
       
        // TODO: download checksum, compute local checksum, assert equivalence
        
        dest buildDir
        overwrite false
    }    
    
    // TODO: REMOVE OR EDIT THIS GUARD as non-windows platforms work - when all work, remove
    if( isWindows() )
    {
        // Create generated java sources before compiling java classes
        compileJava.dependsOn createJavaSourcesFromCapnproto
    }

    dependencies
    {
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile 'com.google.protobuf:protobuf-java:3.12.2'
        compile project(':wres-datamodel')
        compile project(':wres-config')
        
        // Flatbuffers
        compile group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '1.12.0'

        // Cap'n proto
        compile group: 'org.capnproto', name: 'runtime', version: '0.1.5'

        // JMS API
        compile group: 'javax.jms', name: 'javax.jms-api', version: '2.0.1'

        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'

        testCompile 'junit:junit:4.13'
        
        // QPID broker
        testCompile 'org.apache.qpid:qpid-broker-core:7.1.8'

        // QPID broker support for AMQP 0.8 and 0.9.1 (not 1.0)
        testCompile 'org.apache.qpid:qpid-broker-plugins-amqp-0-8-protocol:7.1.8'

        // QPID embedded (aka in-memory) broker support
        testCompile 'org.apache.qpid:qpid-broker-plugins-memory-store:7.1.8'

        // QPID JMS client for AMQP 0.X (not 1.0)
        testCompile group: 'org.apache.qpid', name: 'qpid-client', version: '6.3.4'
    }
}

// Windows OS?
boolean isWindows()
{
    return System.properties['os.name'].toLowerCase().contains( 'windows' );
}

// Linux OS?
boolean isLinux()
{
    return System.properties['os.name'].toLowerCase().contains( 'linux' );
}

// Return /etc/system-release file as a string if readable, else empty string.
String readElInfo()
{
    def elInfoPath = Paths.get( '/etc/system-release' );
    def elInfoReadable = Files.isReadable( elInfoPath );

    if ( elInfoReadable )
    {
        return Files.readString( elInfoPath );
    }

    return '';
}

// RHEL6 or CentOS6 GNU/Linux?
boolean isEl6Linux()
{
    if ( System.properties['os.name'].toLowerCase()
                                     .contains( 'linux' ) )
    {
        return readElInfo().toLowerCase()
                           .contains( 'release 6' );
    }

    return false;
}

// RHEL7 or CentOS7 GNU/Linux?
boolean isEl7Linux()
{
    if ( System.properties['os.name'].toLowerCase()
                                     .contains( 'linux' ) )
    {
        return readElInfo().toLowerCase()
	                   .contains( 'release 7' );
    }

    return false;
}

// Mac OS?
boolean isMac()
{
    return System.properties['os.name'].toLowerCase().contains( 'mac' );
}

project(':wres-vis')
{
    dependencies
    {
        compile project(':wres-datamodel')
        compile project(':wres-config')
        compile project(':wres-util')        

        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
        compile group: 'com.sun.xml.fastinfoset', name: 'FastInfoset', version: '1.2.18'
        compile 'com.google.guava:guava:29.0-jre'
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'

        // For ohdcommonchps.jar:
        runtime group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.8.0-beta4'

        compile files('../libs/external/jcommon-1.0.12.jar')
        compile files('../libs/external/jfreechart-1.0.9.jar')
        compile files('../libs/external/ohdcommonchps.jar')

        testCompile project (':wres-datamodel')
        testCompile files('../libs/external/ohdcommonchps.jar')
        testCompile 'junit:junit:4.13'
        //Must load jfreechart explicitly before EVS.jar to avoid conflicting versions
        testCompile files('../libs/external/jfreechart-1.0.9.jar')
        testCompile files('../libs/external/EVS.jar')
        testRuntime files('dist/lib/conf')
    }

    configurations
    {
        testCompile
        {
            // to prevent the testCompile and testRuntime from inheriting this:
            exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        }
    }
}

project(':wres-config')
{
    apply plugin: 'org.openrepose.gradle.plugins.jaxb'

    dependencies
    {
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'

        // For Java 9+ compatibility:
        compile 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

        // TODO: check that this is consistent with the declaration of dependencies elsewhere
        // and update if not. Added in the context of #44996
        // https://mvnrepository.com/artifact/org.jvnet.jaxb2_commons/jaxb2-basics-runtime
        compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '0.12.0'

        // To know about @Location
        compile 'org.glassfish.jaxb:jaxb-core:2.3.0.1'

        runtime 'org.glassfish.jaxb:jaxb-runtime:2.3.3'

        runtime 'org.eclipse.persistence:org.eclipse.persistence.moxy:2.7.7'

        testCompile 'junit:junit:4.13'

        // May help in future with #37380, may need to modify sources
        // available at https://git.apache.org/cxf-xjc-utils.git in dv dir:
        // xjc 'org.apache.cxf.xjcplugins:cxf-xjc-dv:3.2.0'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.12.0'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics:0.12.0'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.1.0'

        // commons-beanutils is transitive dependency of jaxb2-basics, has CVEs
        jaxb 'commons-beanutils:commons-beanutils:1.9.4'

        // jaxb-xjc transitively includes bind-api and jaxb-core
        jaxb 'org.glassfish.jaxb:jaxb-xjc:2.3.3'
        jaxb 'com.github.sabomichal:immutable-xjc-plugin:1.6.2'
    }

    def generatedIntermediateDir = "${project.buildDir}/generated"

    jaxb
    {
        xsdDir = "${project.projectDir}/nonsrc"
        bindingsDir = xsdDir

        xjc
        {
            taskClassname = 'org.jvnet.jaxb2_commons.xjc.XJC2Task'
            generatePackage = 'wres.config.generated'
            destinationDir = "${generatedIntermediateDir}"
            // For location information to be in classes, -Xlocator is needed
            // here. For location information to be in instances at runtime, the
            // eclipselink moxy library is required at runtime (see runtime dep)

            // JBr: added -Xequals and -XhashCode implementations. Also added 
            // -Xinject-code to allow for wres.config.generated.ProjectConfig 
            // to implement java.lang.Comparable. See discussion in #44996

            args = [ '-Xinject-code', '-Xinheritance', '-Xannotate',
                     '-immutable', '-Xlocator', '-Xequals', '-XhashCode',
                     '-XtoString' ]
            // May help in future with #37380:
            //args = ['-Xinheritance', '-Xannotate', '-immutable', '-Xlocator', '-Xdv']
            producesDir = "${xsdDir}"
        }
    }

    // Struggled to find a way to get great incremental builds, ended up using
    // an additional copy task. The idea is that xjc task will drop files into
    // the build directory as an intermediate directory. The whole build dir
    // gets cleaned up on "clean". Now, in copyGenerated we copy from "build"
    // into "src" but cleaning up the src before doing so, to avoid extra files
    // lying around whenever the xsd file changes. This task will happen every
    // time, unfortunately, however, the xsd generation and java compilation
    // still will have the desired incremental properties (and dependents such
    // as jar).
    // Incremental builds without this extra task could probably be fixed at
    // https://github.com/rackerlabs/gradle-jaxb-plugin
    //
    // Also, when the plugin fixes
    // https://github.com/rackerlabs/gradle-jaxb-plugin/issues/6 we should get
    // the latest version (this seems to happen on each build)
    task copyGenerated(type:Copy, dependsOn: xjc, group: 'Parse') {
        description = 'Ensures generated code is created and available in src.'
        destinationDir = file("${project.projectDir}/src")
        delete fileTree(dir: destinationDir).include('**/generated/*.java')
        from fileTree("${generatedIntermediateDir}")
        into destinationDir
    }

    // Wiring the generation of jaxb classes into standard compilation task:
    compileJava.dependsOn copyGenerated

    javadoc
    {
        // XJC generates Java8-unfriendly javadoc. Do not bother generating.
        excludes = ['**/generated/*.java']
    }
}

project(':wres-grid')
{
    dependencies
    {
        compile project(':wres-config')
        compile project(':wres-util')
        compile project(':wres-system')
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile('edu.ucar:cdm-core:5.3.2')
        {
            // Because we use slf4j, not jcl:
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'

        // Because cdm uses apache commons logging, bridge to slf4j
        runtime 'org.slf4j:jcl-over-slf4j:1.8.0-beta4'

        testCompile 'junit:junit:4.13'
    }
}

project(':wres-messages')
{
    apply plugin: 'com.google.protobuf'

    def generatedDir = "${project.projectDir}/src"

    protobuf
    {
        // Automatically download and use the correct protobuf compiler
        protoc
        {
            artifact = 'com.google.protobuf:protoc:3.12.2'
        }
        // So all IDEs/editors can see generated files, use actual src dir:
        generatedFilesBaseDir = "${generatedDir}"
    }

    sourceSets
    {
        main
        {
            // Deviate from our typical source tree here to work around plugin's
            // inflexibility on paths plus IDEs handling generated code, see
            // https://github.com/google/protobuf-gradle-plugin/issues/190
            // The different srcDirs seems to work for eclipse, not IDEA.
            // But somehow a bunch of weird src tree shows up too.
            java
            {
                srcDirs = ['src/main/java']
            }

            // Tell protobuf plugin where to find .proto schema files:
            proto
            {
                srcDirs = ['nonsrc']
            }
        }
    }

    javadoc
    {
        // Protobuf does not appear to generate javadoc, so neither will we.
        excludes = ['**/generated/*.java']
    }

    dependencies
    {
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile 'com.google.protobuf:protobuf-java:3.12.2'

        testCompile 'junit:junit:4.13'
    }
}


project(':wres-worker')
{
    dependencies
    {
        compile project( ':wres-messages' )
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile 'com.rabbitmq:amqp-client:5.9.0'
        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'

        testCompile 'junit:junit:4.13'
    }

    apply plugin: 'application'

    mainClassName = 'wres.worker.Worker'
    applicationDefaultJvmArgs = ['-Xms32m','-Xmx32m',
                                 '-XX:+HeapDumpOnOutOfMemoryError']

    // Add logging configuration to the classpath when running via script
    startScripts
    {
        // Note: see lengthy note in main application below
        classpath += files('conf')
    }

    // Make available logging configuration to the classpath
    distributions
    {
        main
        {
            contents
            {
                from
                {
                    // Note: see lengthy note in main application below
                    ['dist']
                }
            }
        }
    }
}

project(':wres-tasker')
{
    dependencies
    {
        compile project( ':wres-messages' )
        compile 'org.slf4j:slf4j-api:1.8.0-beta4'
        compile 'com.rabbitmq:amqp-client:5.9.0'
        compile 'javax.ws.rs:javax.ws.rs-api:2.1.1'
        compile 'javax.annotation:javax.annotation-api:1.3.2'

        // For Java 9+ compatibility:
        compile 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

        // Server library to run a web server:
        compile 'org.eclipse.jetty:jetty-server:9.4.29.v20200521'

        // Servlet container library to run a web application with:
        compile 'org.eclipse.jetty:jetty-webapp:9.4.29.v20200521'

        // Needed at compile-time to reference ServletContainer.class and
        // DefaultServlet.class
        compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.31'
        // Update the jetty-continuation depended upon by above jersey dep
        compile 'org.eclipse.jetty:jetty-continuation:9.4.29.v20200521'

        compile 'com.github.ben-manes.caffeine:caffeine:2.8.4'

        // To accurately detect mime types of files.
        compile 'org.apache.tika:tika-core:1.24.1'

        runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'
        runtime 'org.glassfish.jersey.core:jersey-server:2.31'

        // Needed to prevent "java.lang.IllegalStateException: InjectionManagerFactory not found."
        // Thanks, https://luohuahuang.org/2017/11/13/jersey-illegalstateexception-injectionmanagerfactory/
        runtime 'org.glassfish.jersey.inject:jersey-hk2:2.31'

        testCompile 'junit:junit:4.13'

        // To generate fake certificates and keys for testing
        testCompile 'org.bouncycastle:bcpkix-jdk15on:1.65'
        testCompile 'org.bouncycastle:bcprov-jdk15on:1.65'

        // To test against an embedded AMQP broker
        testCompile 'org.apache.qpid:qpid-broker-core:7.1.8'
        // Provides support for both 0-8 and 0-9-1
        testCompile 'org.apache.qpid:qpid-broker-plugins-amqp-0-8-protocol:7.1.8'
        testCompile 'org.apache.qpid:qpid-broker-plugins-memory-store:7.1.8'
    }

    apply plugin: 'application'

    mainClassName = 'wres.tasker.Tasker'
    applicationDefaultJvmArgs = ['-Xms1305m','-Xmx1305m',
                                 '-XX:+HeapDumpOnOutOfMemoryError']

    // Add static html files to the classpath when running via script
    startScripts
    {
        // Note: see lengthy note in main application below
        classpath += files('static')
        classpath += files('conf')
    }

    // Make available static html files to classpath, also logging configuration
    distributions
    {
        main
        {
            contents
            {
                from
                {
                    // Note: see lengthy note in main application below
                    ['dist']
                }
            }
        }
    }
}



/* Single report for test coverage, thanks to
https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/5
 */
apply plugin: 'jacoco'        // code coverage tool
apply plugin: 'org.sonarqube' // static analysis tool

task(jacocoRootReport, type: JacocoReport, group: 'Verification', dependsOn: [subprojects.test, test])
{
    description = 'Generates an all-subproject aggregate code coverage report.'

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs,
                              sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output,
                             sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData,
                          jacocoTestReport.executionData)

    doFirst
    {
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 * Task to compile markdown to html
 */
task(buildDocs, group: 'Documentation')
{
    description = 'Compiles markdown documentation into html'
    def srcDir = "${project.projectDir}/documentation/src" // seems odd that we have to do this
    def destDir = "${project.buildDir}/doc" // define these and use them later.

    inputs.dir(srcDir)
    outputs.dir(destDir)

    doFirst {
        // in case a source was removed, get rid of all html files.
        delete fileTree(dir: destDir).include('**/*.html').include('**/*.css')
    }

    doLast {
        def destFile = new File(destDir)
        destFile.mkdirs()

        def parser = org.commonmark.parser.Parser.builder().build()
        def renderer = org.commonmark.renderer.html.HtmlRenderer.builder().build()
        inputs.files.each {
            def basePath = Paths.get( it.path )
                                .getFileName()
                                .toString()

            if ( it.path.endsWith( ".md" ) )
            {
                // yuck, but I haven't found the better way yet
                def srcIdx =  it.path.indexOf( srcDir )
                def baseFileName = basePath.substring( 0, basePath.length() - 3 )

                // The meat - using commonmark to transform md to html
                def document = parser.parseReader( new FileReader( it ) )
                def innerOutput = renderer.render( document )
                def header = "<!DOCTYPE html>\r\n"
                header += "<html><head>\r\n"
                header += "    <link rel='stylesheet' type='text/css' href='style.css' />\r\n"
                header += "</head>\r\n<body>\r\n"
                def footer = "</body>\r\n</html>\r\n"
                def output = header + innerOutput + footer
                def outputPath = Paths.get( destDir, baseFileName + '.html' )
                Files.write( outputPath,
                             output.getBytes(),
                             StandardOpenOption.CREATE )
            }
            else
            {
                def outputPath = Paths.get( destDir, basePath )
                Files.copy( it.toPath(),
                            outputPath,
                            StandardCopyOption.REPLACE_EXISTING )
            }
        }
    }
}

/**
 * Kind of like xjc, there is an intermediate location in the build directory
 * so that gradle clean will remove these files.
 */
task(copyDocs, type: Copy, group: 'Documentation', dependsOn: buildDocs)
{
    description = 'Copies documentation source to distribution directory.'

    destinationDir = file("${project.projectDir}/dist/doc")

    doFirst {
        // in case a source file was removed, clean up old html files.
        delete fileTree(dir: destinationDir).include('**/*.html')
    }

    from buildDocs
    into destinationDir
}

apply plugin: 'application'

mainClassName = 'wres.Main'

sourceCompatibility = '11'
targetCompatibility = '11'

applicationDefaultJvmArgs = ['-Xms2180m', '-Xmx2180m',
                             '-XX:+HeapDumpOnOutOfMemoryError',
                             '-Djava.util.logging.config.class=wres.system.logging.JavaUtilLoggingRedirector',
                             '-Ducar.unidata.io.http.maxReadCacheSize=200000',
                             '-Ducar.unidata.io.http.httpBufferSize=200000' ]

// Get the commit and date from the TOP for this project, it is outermost.
// The top level commit will also reflect changes to this build.gradle script.
def gitCommit = grgit.head()
def gitCommitId = gitCommit.id
def gitCommitDate = gitCommit.getDate()
def gitIsClean = grgit.status().isClean()

version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6]
if (!gitIsClean)
{
    version = version + '-dev'
}

apply plugin: 'nebula-aggregate-javadocs'

apply plugin: 'org.owasp.dependencycheck'

dependencies
{
    compile project(':wres-util')
    compile project(':wres-system')
    compile project(':wres-datamodel')
    compile project(':wres-io')
    compile project(':wres-metrics')
    compile project(':wres-config')
    compile project(':wres-vis')

    compile 'org.slf4j:slf4j-api:1.8.0-beta4'

    compile 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'org.eclipse.jetty:jetty-server:9.4.29.v20200521'
    compile 'org.eclipse.jetty:jetty-webapp:9.4.29.v20200521'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.31'
    // Update the jetty-continuation that above jersey dep depends on
    compile 'org.eclipse.jetty:jetty-continuation:9.4.29.v20200521'

    compile 'com.github.ben-manes.caffeine:caffeine:2.8.1'

    runtime 'org.glassfish.jersey.core:jersey-server:2.31'
    runtime 'org.glassfish.jersey.containers:jersey-container-jetty-http:2.31'
    runtime 'org.glassfish.jersey.inject:jersey-hk2:2.31'

    runtime 'ch.qos.logback:logback-classic:1.3.0-alpha4'


    testCompile group: 'commons-io', name: 'commons-io', version: '2.7'
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: '29.0-jre'
    testCompile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    testCompile 'junit:junit:4.13'
    testCompile 'org.mockito:mockito-core:3.3.3'
}

sourceSets
{
    main
    {
        java
        {
            srcDirs = ['src', 'dist/lib/conf']
        }

        resources
        {
            srcDirs = ['nonsrc']
        }
    }

    test
    {
        java
        {
            srcDirs = ['test']
            exclude 'wres/systests/**'
        }

        resources
        {
            srcDirs = ['testNonsrc']
        }
    }
}

// Allows this:
// gradlew run -PappArgs="['saveForecast','/path/to/file']"
run
{
    if (project.hasProperty("appArgs"))
    {
        args Eval.me(appArgs)
    }
    // Allow profiling during run
    //jvmArgs = ['-agentlib:hprof=cpu=samples,interval=5,depth=25']
}

// Default location in gradle is 'src/dist' but we want conf files that are
// outside the jar to be from the 'dist' directory.
distributions
{
    main
    {
        contents
        {
            from
            {
                // Note: to have files land in the distributed zip files,
                // must put inside lib directory inside below directory.
                // Must also add the new directory to classpath under
                // startScripts below. For each module that adds to dist,
                // add here for now until we can make it grab all of em.
                ['dist', 'wres-vis/dist', 'wres-io/dist', 'LICENSE']
            }
        }
    }
}

// hook to get documentation into default zip/tar/etc.
processResources.dependsOn(copyDocs)

// Add configuration files to the classpath when running via script
startScripts
{
    // Note gradle in this context assumes lib directory precedes these
    // files. To add more outsidejar directories, they need to be
    // added to 'dist/lib' and then the directory name
    // can be added below.
    classpath += files('conf')
}

jar
{
    // toward reproducible builds:
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // version number should be included
    manifest
    {
        attributes("Implementation-Title": "Water Resources Evaluation Service",
                   "Implementation-Version": version)
    }
}

defaultTasks 'installDist', 'test', 'javadoc', 'jacocorootreport'

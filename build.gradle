ext
{
    gitCommitId = org.ajoberstar.grgit.Grgit.open(file('.')).head().id
    gitCommitDate = org.ajoberstar.grgit.Grgit.open(file('.')).head().getDate()
//    gitChangeCount = org.ajoberstar.grgit.Grgit.open(file('.')).head().commitDiff().getAllChanges().length
}

subprojects
{
    apply plugin: 'java'
    apply plugin: 'jacoco'

	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'

    version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6];
    // TODO: figure out how to add -dev (dirty flag)
/*    if (gitChangeCount > 0)
    {
        version = version + '-dev' + gitChangeCount
    }*/

    sourceSets
    {
        main
        {
            java
            {
                // Standard sources in src. The outsidejar is for eclipse, it
                // seems unintuitive but somehow works because there are no
                // actual java files inside the conf directory, this just
                // causes the files to show up on eclipse's classpath at
                // runtime or debugtime.
                // https://stackoverflow.com/questions/18183677/gradle-add-folder-to-eclipse-classpath#18184414
                srcDirs = ['src', 'nonsrc/outsidejar/lib/conf']
            }

            // "resources" here end up included inside the jar.
            // For non-jarred resources such as config files, see distributions
            // section inside wres-core, as well as startScripts section.
            resources
            {
                srcDirs = ['nonsrc/insidejar']
            }
        }

        test
        {
        	java
        	{
        		srcDirs = ['test']
        	}
        }
    }

    repositories
    {
        mavenCentral()
        maven 
        {
            url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/"
        }
    }

    test
    {
        maxHeapSize = "3072m"
        testLogging.showStandardStreams = true

    }
}

project(':utilities')
{
	dependencies
	{
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')

        compile 'org.slf4j:slf4j-api:1.7.25'

        compile 'com.google.guava:guava:22.0'

        runtime 'ch.qos.logback:logback-classic:1.2.3'

        testCompile 'junit:junit:4.12'
        testCompile files('../libs/external/EVS.jar')
	}
}


project(':wres-datamodel-api')
{
	dependencies
    {
        testCompile 'junit:junit:4.12'
    }
}

project(':wres-core')
{
    apply plugin: 'application'

    mainClassName = 'Main'

    applicationDefaultJvmArgs = ['-Xmx3600m', '-Xms3200m']

    dependencies
    {
        compile project(':utilities')
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')
        compile project(':wres-io')

        compile 'org.slf4j:slf4j-api:1.7.25'

        compile('edu.ucar:cdm:4.6.8')
        {
            // because we are getting a later version from diff group:
            exclude group: 'c3p0', module: 'c3p0'
            // because these shouldn't be on compile classpath:
            exclude group: 'ch.qos.logback', module: 'logback-classic'
            exclude group: 'ch.qos.logback', module: 'logback-core'
        }

        // to use native postgres copy, need this on compile, otherwise runtime
        compile 'org.postgresql:postgresql:42.0.0'

		// connection pooling:
		compile 'com.mchange:c3p0:0.9.5.2'

        runtime 'ch.qos.logback:logback-classic:1.2.3'

        //JB @ 02/16/17
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'
    }

    // Allows this:
    // gradlew run -PappArgs="['saveForecast','/path/to/file']"
    run
    {
        if (project.hasProperty("appArgs"))
        {
            args Eval.me(appArgs)
        }
        // Allow profiling during run
        //jvmArgs = ['-agentlib:hprof=cpu=samples,interval=5,depth=25']
    }

    // Default location in gradle is 'src/dist' but we want conf files that are
    // outside the jar to be from the 'nonsrc' directory.
    distributions
    {
        main
        {
            contents
            {
                from
                {
                    // Note: to have files land in the distributed zip files,
                    // must put inside lib directory inside below directory.
                    // Must also add the new directory to classpath under
                    // startScripts below.
                    'nonsrc/outsidejar'
                    // trying to get project files, no need for classpath
                    'project'
                }
            }
        }
    }

    // Add configuration files to the classpath when running via script
    startScripts
    {
        // Note gradle in this context assumes lib directory precedes these
        // files. To add more outsidejar directories, they need to be
        // added to 'nonsrc/outsidejar/lib' and then the directory name
        // can be added below.
        classpath += files('conf')
    }
}

project(':wres-datamodel')
{
    dependencies
    {
        compile project(':wres-datamodel-api')

        compile 'org.slf4j:slf4j-api:1.7.25'

        testCompile 'junit:junit:4.12'
    }
}

project(':wres-experiment')
{
    dependencies
    {
        compile group: 'edu.ucar', name: 'cdm', version: '4.6.8'
        compile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'

        //JB @ 02/16/17
        testCompile 'junit:junit:4.12'
    }
}

project(':wres-io')
{
    dependencies
    {
        compile project(':utilities')
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')

        compile 'org.slf4j:slf4j-api:1.7.25'

        compile('edu.ucar:cdm:4.6.8')
        {
            // because we are getting a later version from diff group:
            exclude group: 'c3p0', module: 'c3p0'
            // because these shouldn't be on compile classpath:
            exclude group: 'ch.qos.logback', module: 'logback-classic'
            exclude group: 'ch.qos.logback', module: 'logback-core'
        }


        // to use native postgres copy, need this on compile, otherwise runtime
        compile 'org.postgresql:postgresql:42.0.0'

		// connection pooling:
		compile 'com.mchange:c3p0:0.9.5.2'

        //JB @ 02/16/17
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'
    }
}

project(':wres-metrics')
{
    dependencies
    {
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')

        compile 'org.slf4j:slf4j-api:1.7.25'

        testCompile 'junit:junit:4.12'
    }
}

/* Single report for test coverage, thanks to
https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/5
 */
apply plugin: 'jacoco'        // code coverage tool
apply plugin: 'org.sonarqube' // static analysis tool

/* used by sonarqube static analysis (and git versioning, see top of file) */
buildscript
{
    repositories
    {
        mavenCentral()
    }
    dependencies
    {
        // for static analysis tool sonarqube:
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4'
        // for ability to use git ids for labeling jar files:
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}

/* used by jacocoRootReport task */
repositories
{
    mavenCentral()
}

task(jacocoRootReport, type: JacocoReport, group: 'Verification', dependsOn: [subprojects.test])
{
    description = 'Generates an all-subproject aggregate code coverage report.'

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs, )
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    doFirst
    {
        executionData = files(executionData.findAll { it.exists() })
    }
}

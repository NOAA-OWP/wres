import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

/* used by sonarqube static analysis and git versioning */
buildscript
{
    repositories
    {
        mavenCentral()
    }
    dependencies
    {
        // for static analysis tool sonarqube:
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4'
        // For markdown -> html
        classpath 'com.atlassian.commonmark:commonmark:0.9.0'
    }
}

plugins
{
    //id 'com.github.jacobono.jaxb' version '1.3.5'
    // above is unmaintained, less gradle-y, below fork has several improvements
    id 'org.openrepose.gradle.plugins.jaxb' version '2.4.1'
    // for ability to use git ids for versioning jar files:
    id 'org.ajoberstar.grgit' version '1.7.2'
    // To compile user documentation (not working: blows up on compileMarkdown)
    //id 'org.uulib.gradle.markdown' version '0.0.1'
}

repositories
{
    mavenCentral()
    maven 
    {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/"// 
    }
}


subprojects
{
    apply plugin: 'java'
    apply plugin: 'jacoco'

	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'

    // Each module does not need a version update unless code in it has changed.
    def gitCommit = grgit.log(paths: [project.name], maxCommits:1).find()
    def gitCommitId = gitCommit.id
    def gitCommitDate = gitCommit.getDate()

    def gitIsClean = grgit.status().isClean()

    version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6]
    if (!gitIsClean)
    {
        version = version + '-dev'
    }

    sourceSets
    {
        main
        {
            java
            {
                // Standard sources in src. The dist being here is for eclipse
                // purposes. Eclipse needs the conf files to be labeled as
                // source or library or class in order to land on its runtime
                // or debugtime classpath.

                // It seems unintuitive but somehow works because there are no
                // actual java files inside the conf directory, this just
                // causes the files to show up on eclipse's classpath at
                // runtime or debugtime.
                // https://stackoverflow.com/questions/18183677/gradle-add-folder-to-eclipse-classpath#18184414
                srcDirs = ['src', 'dist/lib/conf']
            }

            // "resources" here end up included inside the jar.
            // For non-jarred resources such as config files, see distributions
            // section inside wres-core, as well as startScripts section.
            resources
            {
                srcDirs = ['nonsrc']
            }
        }

        test
        {
        	java
        	{
        		srcDirs = ['test']
        	}
        }
    }

    repositories
    {
        mavenCentral()
        maven 
        {
            url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/"// 
            
        }
    }

    test
    {
        maxHeapSize = "3072m"
        testLogging.showStandardStreams = true

    }

    jar
    {
        // toward reproducible builds:
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        // version number should be included
        manifest
        {
            attributes("Implementation-Title": "Water Resources Evaluation Service",
                       "Implementation-Version": version)
        }
    }
}

project(':utilities')
{
	dependencies
	{
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')

        compile 'org.slf4j:slf4j-api:1.7.25'

        compile 'com.google.guava:guava:22.0'

        compile('edu.ucar:cdm:4.6.8')
        {
            // because we are getting a later version from diff group:
            exclude group: 'c3p0', module: 'c3p0'
            // because these shouldn't be on compile classpath:
            exclude group: 'ch.qos.logback', module: 'logback-classic'
            exclude group: 'ch.qos.logback', module: 'logback-core'
        }

        runtime 'ch.qos.logback:logback-classic:1.2.3'

        testCompile 'junit:junit:4.12'
        testCompile files('../libs/external/EVS.jar')
	}
}


project(':wres-datamodel-api')
{
	dependencies
    {     
	testCompile 'junit:junit:4.12'
    }
}

project(':wres-datamodel')
{
    dependencies
    {
        compile project(':wres-datamodel-api')

        compile 'org.slf4j:slf4j-api:1.7.25'

        testCompile 'junit:junit:4.12'

        testCompile files('../libs/external/EVS.jar')
    }
}

project(':wres-io')
{
    dependencies
    {
        compile project(':utilities')
        compile project(':wres-datamodel-api')
        compile project(':wres-datamodel')
        compile project(':wres-config')

        compile 'org.slf4j:slf4j-api:1.7.25'

        compile('edu.ucar:cdm:4.6.8')
        {
            // because we are getting a later version from diff group:
            exclude group: 'c3p0', module: 'c3p0'
            // because these shouldn't be on compile classpath:
            exclude group: 'ch.qos.logback', module: 'logback-classic'
            exclude group: 'ch.qos.logback', module: 'logback-core'
        }

        compile group: 'org.apache.commons', name: 'commons-compress', version: '1.14'

        compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'

        // to use native postgres copy, need this on compile, otherwise runtime
        compile 'org.postgresql:postgresql:42.0.0'

		// connection pooling:
		compile 'com.mchange:c3p0:0.9.5.2'

        //JB @ 02/16/17
        testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'

        testCompile 'junit:junit:4.12'

        // Mocking help
        testCompile 'org.mockito:mockito-core:2.8.9'

        // super-duper mocking help (mocking static, private methods)
        testCompile 'org.powermock:powermock-api-mockito2:1.7.0RC4'
        testCompile 'org.powermock:powermock-module-junit4:1.7.0RC4'

        // try out an embedded postgres
        testCompile 'ru.yandex.qatools.embed:postgresql-embedded:2.2'
    }
}

project(':wres-metrics')
{
    dependencies
    {
        compile project(':wres-datamodel-api')
	compile project(':wres-config')
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6'
        compile 'org.slf4j:slf4j-api:1.7.25'

        testCompile project (':wres-datamodel')
        testCompile project (':wres-io')
        testCompile 'junit:junit:4.12'
        testCompile 'org.slf4j:slf4j-api:1.7.25'
    }
}

project(':wres-vis')
{
    dependencies
    {
        compile project(':wres-datamodel-api')
        
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
        compile group: 'com.sun.xml.fastinfoset', name: 'FastInfoset', version: '1.2.6'
        compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
        compile 'com.google.guava:guava:22.0'
        compile 'org.slf4j:slf4j-api:1.7.25'
        runtime 'ch.qos.logback:logback-classic:1.2.3'

        compile files('../libs/external/jcommon-1.0.12.jar')
        compile files('../libs/external/jfreechart-1.0.9.jar')
        compile files('../libs/external/ohdcommonchps.jar')

        testCompile project (':wres-datamodel')
        testCompile files('../libs/external/ohdcommonchps.jar')
        testCompile 'junit:junit:4.12'
        //Must load jfreechart explicitly before EVS.jar to avoid conflicting versions
        testCompile files('../libs/external/jfreechart-1.0.9.jar')
        testCompile files('../libs/external/EVS.jar')
        testRuntime files('dist/lib/conf')
    }
}

project(':wres-config')
{
    // apply plugin: 'com.github.jacobono.jaxb'
    apply plugin: 'org.openrepose.gradle.plugins.jaxb'

    dependencies
    {
        xjc 'com.github.sabomichal:immutable-xjc-plugin:1.3.3'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:1.11.1'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics:1.11.1'
        jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.0.2'
        jaxb 'com.sun.xml.bind:jaxb-core:2.2.11'
        jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.11'
    }

    def generatedIntermediateDir = "${project.buildDir}/generated"

    jaxb
    {
        xsdDir = "${project.projectDir}/nonsrc"
        bindingsDir = xsdDir

        xjc
        {
            taskClassname = 'org.jvnet.jaxb2_commons.xjc.XJC2Task'
            generatePackage = 'wres.config.generated'
            destinationDir = "${generatedIntermediateDir}"
            // For location information to be in classes, -Xlocator is needed
            // here. For location information to be in instances at runtime, the
            // eclipselink moxy library is required at runtime (see runtime dep)
            args = ['-Xinheritance', '-Xannotate', '-immutable', '-Xlocator']
            producesDir = "${xsdDir}"
        }
    }

    // Struggled to find a way to get great incremental builds, ended up using
    // an additional copy task. The idea is that xjc task will drop files into
    // the build directory as an intermediate directory. The whole build dir
    // gets cleaned up on "clean". Now, in copyGenerated we copy from "build"
    // into "src" but cleaning up the src before doing so, to avoid extra files
    // lying around whenever the xsd file changes. This task will happen every
    // time, unfortunately, however, the xsd generation and java compilation
    // still will have the desired incremental properties (and dependents such
    // as jar).
    // Incremental builds without this extra task could probably be fixed at
    // https://github.com/rackerlabs/gradle-jaxb-plugin
    //
    // Also, when the plugin fixes
    // https://github.com/rackerlabs/gradle-jaxb-plugin/issues/6 we should get
    // the latest version (this seems to happen on each build)
    task copyGenerated(type:Copy, dependsOn: xjc) {
        destinationDir = file("${project.projectDir}/src")
        delete fileTree(dir: destinationDir).include('**/generated/*.java')
        from fileTree("${generatedIntermediateDir}")
        into destinationDir
    }

    dependencies
    {
        // To know about @Location
        compile 'com.sun.xml.bind:jaxb-core:2.2.11'
        runtime 'org.eclipse.persistence:org.eclipse.persistence.moxy:2.6.4'
    }
    // Wiring the generation of jaxb classes into standard compilation task:
    compileJava.dependsOn copyGenerated
}

/* Single report for test coverage, thanks to
https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/5
 */
apply plugin: 'jacoco'        // code coverage tool
apply plugin: 'org.sonarqube' // static analysis tool

task(jacocoRootReport, type: JacocoReport, group: 'Verification', dependsOn: [subprojects.test])
{
    description = 'Generates an all-subproject aggregate code coverage report.'

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs, )
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    doFirst
    {
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 * Task to compile markdown to html
 */
task(buildDocs, group: 'Documentation')
{
    description = 'Compiles markdown documentation into html'
    def srcDir = "${project.projectDir}/documentation/src" // seems odd that we have to do this
    def destDir = "${project.buildDir}/doc" // define these and use them later.

    inputs.dir(srcDir)
    outputs.dir(destDir)

    doFirst {
        // in case a source was removed, get rid of all html files.
        delete fileTree(dir: destDir).include('**/*.html')
    }

    doLast {
        def destFile = new File(destDir)
        destFile.mkdirs()

        def parser = org.commonmark.parser.Parser.builder().build()
        def renderer = org.commonmark.renderer.html.HtmlRenderer.builder().build()
        inputs.files.each {
            // yuck, but I haven't found the better way yet
            def srcIdx =  it.path.indexOf(srcDir)
            def basePath = it.path.substring(srcIdx + srcDir.length(), it.path.length() - 3)

            // The meat - using commonmark to transform md to html
            def document = parser.parseReader(new FileReader(it))
            def output = renderer.render(document)
            def outputPath = Paths.get(destDir, basePath + '.html')
            Files.write(outputPath, output.getBytes(), StandardOpenOption.CREATE)
        }
    }
}

/**
 * Kind of like xjc, there is an intermediate location in the build directory
 * so that gradle clean will remove these files.
 */
task(copyDocs, type: Copy, group: 'Documentation', dependsOn: buildDocs)
{
    description = 'Copies documentation source to distribution directory.'

    destinationDir = file("${project.projectDir}/dist/doc")

    doFirst {
        // in case a source file was removed, clean up old html files.
        delete fileTree(dir: destinationDir).include('**/*.html')
    }

    from buildDocs
    into destinationDir
}

apply plugin: 'application'

mainClassName = 'wres.Main'

applicationDefaultJvmArgs = ['-Xms1024m']

// Get the commit and date from the TOP for this project, it is outermost.
def gitCommit = grgit.head()
def gitCommitId = gitCommit.id
def gitCommitDate = gitCommit.getDate()
def gitIsClean = grgit.status().isClean()

version = gitCommitDate.format('yyyyMMdd') + '-' + gitCommitId[0..6]
if (!gitIsClean)
{
    version = version + '-dev'
}

dependencies
{
    compile project(':utilities')
    compile project(':wres-datamodel-api')
    compile project(':wres-datamodel')
    compile project(':wres-io')
    compile project(':wres-metrics')
    compile project(':wres-config')
    compile project(':wres-vis')

    compile 'org.slf4j:slf4j-api:1.7.25'

    compile('edu.ucar:cdm:4.6.8')
    {
        // because we are getting a later version from diff group:
        exclude group: 'c3p0', module: 'c3p0'
        // because these shouldn't be on compile classpath:
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }

    // to use native postgres copy, need this on compile, otherwise runtime
    compile 'org.postgresql:postgresql:42.0.0'

    // connection pooling:
    compile 'com.mchange:c3p0:0.9.5.2'

    runtime 'ch.qos.logback:logback-classic:1.2.3'

    //JB @ 02/16/17
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'
}

sourceSets
{
    main
    {
        java
        {
            srcDirs = ['src', 'dist/lib/conf']
        }

        resources
        {
            srcDirs = ['nonsrc']
        }
    }

    test
    {
        java
        {
            srcDirs = ['test']
        }
    }
}

// Allows this:
// gradlew run -PappArgs="['saveForecast','/path/to/file']"
run
{
    if (project.hasProperty("appArgs"))
    {
        args Eval.me(appArgs)
    }
    // Allow profiling during run
    //jvmArgs = ['-agentlib:hprof=cpu=samples,interval=5,depth=25']
}

// Default location in gradle is 'src/dist' but we want conf files that are
// outside the jar to be from the 'dist' directory.
distributions
{
    main
    {
        contents
        {
            from
            {
                // Note: to have files land in the distributed zip files,
                // must put inside lib directory inside below directory.
                // Must also add the new directory to classpath under
                // startScripts below. For each module that adds to dist,
                // add here for now until we can make it grab all of em.
                ['dist', 'wres-vis/dist']
            }
        }
    }
}

// hook to get documentation into default zip/tar/etc.
processResources.dependsOn(copyDocs)

// Add configuration files to the classpath when running via script
startScripts
{
    // Note gradle in this context assumes lib directory precedes these
    // files. To add more outsidejar directories, they need to be
    // added to 'dist/lib' and then the directory name
    // can be added below.
    classpath += files('conf')
}

jar
{
    // toward reproducible builds:
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // version number should be included
    manifest
    {
        attributes("Implementation-Title": "Water Resources Evaluation Service",
                   "Implementation-Version": version)
    }
}

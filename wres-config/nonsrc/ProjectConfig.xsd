<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
           jaxb:version="2.1"
           elementFormDefault="qualified">

    <xs:simpleType name="datasourceType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ensemble forecasts" />
            <xs:enumeration value="single valued forecasts" />
            <xs:enumeration value="observations" />
            <xs:enumeration value="simulations" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="format">
        <xs:restriction base="xs:string">
            <xs:enumeration value="PI-XML" />
            <xs:enumeration value="netCDF" />
            <xs:enumeration value="datacard" />
            <!-- Neither "archive" nor "all" make sense to me. The idea is to
                 help describe the actual format of the data when it is not
                 obvious from examining it. Filtering/conditioning is in another
                 section of the config. -Jesse -->
            <xs:enumeration value="archive" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ensembleCondition">
        <xs:attribute name="label" type="xs:string" />
        <xs:attribute name="name" type="xs:string" />
        <xs:attribute name="member_id" type="xs:string" />
        <xs:attribute name="qualifier" type="xs:string" />
        <xs:attribute name="exclude" type="xs:boolean" default="false" />
    </xs:complexType>

    <xs:complexType name="conditions">
        <xs:sequence>
            <xs:element name="dates" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <!-- xs:dateTime ends up being yucky XMLGregorianCalendar. Use string, let app deal with it. -->
                    <xs:attribute name="earliest" type="xs:string" />
                    <xs:attribute name="latest" type="xs:string" />
                </xs:complexType>
            </xs:element>
            <xs:element name="issuedDates" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:attribute name="earliest" type="xs:string" />
                    <xs:attribute name="latest" type="xs:string" />
                </xs:complexType>
            </xs:element>
            <!-- values min and max will take from the pair target unit? -->
            <xs:element name="values" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:attribute name="minimum" type="xs:double" />
                    <xs:attribute name="maximum" type="xs:double" />
                </xs:complexType>
            </xs:element>

            <xs:element name="features" type="feature" minOccurs="1" maxOccurs="unbounded"/>

            <!-- idea here is mask is a WKT, or optionally a filename,
                 so you could do either:
                 <mask file="file:///my/file.shp" />
                 OR
                 <mask>poly( whatever well-known-text )</mask> -->
            <xs:element name="mask" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="file" type="xs:anyURI" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="firstLead" type="xs:int" default="1"/>
        <xs:attribute name="lastLead" type="xs:int" default="2147483647" />
    </xs:complexType>

    <xs:complexType name="feature">
        <xs:choice>
            <xs:element name="polygon" type="polygon"/>
            <xs:element name="point" type="coordinate"/>
            <xs:element name="location" type="location"/>
            <xs:element name="index" type="variableIndex" />
        </xs:choice>
        <xs:attribute name="label" type="xs:string" />
        <xs:attribute name="exclude" type="xs:boolean" default="false" />
    </xs:complexType>

    <xs:complexType name="location">
        <xs:attribute name="lid" type="xs:string" />
        <xs:attribute name="comid" type="xs:long" />
        <xs:attribute name="gage_id" type="xs:string" />
        <xs:attribute name="huc" type="xs:string" />
        <xs:attribute name="name" type="xs:string" />
    </xs:complexType>

    <!-- A mask may suffice to replace coordinate and polygon. -Jesse -->
    <xs:complexType name="coordinate">
        <xs:attribute name="x" type="xs:double" />
        <xs:attribute name="y" type="xs:double" />
    </xs:complexType>

    <xs:complexType name="polygon">
        <xs:sequence>
            <xs:element name="point" type="coordinate" minOccurs="3" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="variableIndex">
        <xs:attribute name="x" type="xs:int" />
        <xs:attribute name="y" type="xs:int" />
    </xs:complexType>

    <xs:complexType name="datasource">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="DataSourceConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="type" type="datasourceType" />

            <xs:element name="source" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:anyURI">
                            <xs:attribute name="format" type="format" />
                            <!-- Can we remove unit below? Shouldn't the unit of
                                 the variable suffice? -Jesse -->
                            <xs:attribute name="unit" type="xs:string" default="" />
                            <xs:attribute name="location" type="xs:string" default="" />
                            <xs:attribute name="zoneOffset" type="xs:string" default="0" />
                            <xs:attribute name="timeZone" type="timeZone" default="UTC" />
                            <!-- missingValue may have multiple comma delimited values like "-999, -996"-->
                            <xs:attribute name="missingValue" type="xs:string" default="-999.0" />
                            <xs:attribute name="all" type="xs:boolean" default="false"/>
                            <xs:attribute name="recursive" type="xs:boolean" default="false" />
                            <xs:attribute name="accumulatedValue" type="xs:string" default="-998.0" />
                            <xs:attribute name="commentLnSymbol" type="xs:string" default="$" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
            <xs:element name="variable">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="label" type="xs:string" />
                            <xs:attribute name="unit" type="xs:string" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
            <xs:element name="features" maxOccurs="unbounded" type="feature" />
            <xs:element name="ensemble" type="ensembleCondition" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="arbitraryFunctionToApplyToValues" type="xs:string" minOccurs="0" maxOccurs="1" />
            <xs:element name="timeShift" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="width" type="duration" />
                        <xs:element name="direction" type="direction" />
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="existingTimeAggregation" type="timeAggregation" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <xs:simpleType name="direction">
        <xs:restriction base="xs:string">
            <xs:enumeration value="backward" />
            <xs:enumeration value="forward" />
        </xs:restriction>
    </xs:simpleType>

    <!-- An enum to specify if the left, right, or baseline has been chosen. -->
    <xs:simpleType name="leftOrRightOrBaseline">
        <xs:restriction base="xs:string">
            <xs:enumeration value="left" />
            <xs:enumeration value="right" />
            <xs:enumeration value="baseline" />
        </xs:restriction>
    </xs:simpleType>

    <!-- Thresholds need to specify an operator suitable for thresholding -->
    <xs:simpleType name="thresholdOperator">
        <xs:restriction base="xs:string">
            <xs:enumeration value="less than" />
            <xs:enumeration value="less than or equal to" />
            <xs:enumeration value="greater than" />
            <xs:enumeration value="greater than or equal to" />
        </xs:restriction>
    </xs:simpleType>

    <!-- Thresholds need to specify probabilities and an operator. -->
    <xs:complexType name="probabilityThreshold">

        <!-- for class naming using xjc -->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="ProbabilityThresholdConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="applyTo" type="leftOrRightOrBaseline" default="left" />
            <xs:element name="commaSeparatedValues" type="xs:string" default="0.05,0.1,0.25,0.50,0.75,0.90,0.95" />
            <xs:element name="operator" type="thresholdOperator" default="less than" />
        </xs:sequence>
    </xs:complexType>

    <!-- Value thresholds need to specify values and an operator. -->
    <xs:complexType name="valueThreshold">

        <!-- for class naming using xjc -->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="ValueThresholdConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="applyTo" type="leftOrRightOrBaseline" default="left" />
            <xs:element name="commaSeparatedValues" type="xs:string" />
            <xs:element name="operator" type="thresholdOperator" default="less than" />
        </xs:sequence>
    </xs:complexType>

    <!-- There is a mapping between these names and the enum in MetricConstants.
         For now, these two lists must be periodically synchronized manually.-->
    <xs:simpleType name="metricConfigName">
        <xs:restriction base="xs:string">

            <!-- When user wishes to have all the metrics that are valid for a
                 given configuration -->
            <xs:enumeration value="all valid" />

            <xs:enumeration value="bias fraction" />
            <xs:enumeration value="brier score" />
            <xs:enumeration value="brier skill score" />
            <xs:enumeration value="coefficient of determination" />
            <xs:enumeration value="contingency table" />
            <xs:enumeration value="correlation pearsons" />
            <xs:enumeration value="continuous ranked probability score" />
            <xs:enumeration value="continuous ranked probability skill score" />
            <xs:enumeration value="critical success index" />
            <xs:enumeration value="equitable threat score" />
            <xs:enumeration value="frequency bias" />
            <xs:enumeration value="index of agreement" />
            <xs:enumeration value="kling gupta efficiency" />
            <xs:enumeration value="mean absolute error" />
            <xs:enumeration value="mean error" />
            <xs:enumeration value="mean square error" />
            <xs:enumeration value="mean square error skill score" />
            <xs:enumeration value="peirce skill score" />
            <xs:enumeration value="probability of detection" />
            <xs:enumeration value="probability of false detection" />
            <xs:enumeration value="quantile quantile diagram" />
            <xs:enumeration value="rank histogram" />
            <xs:enumeration value="relative operating characteristic diagram" />
            <xs:enumeration value="relative operating characteristic score" />
            <xs:enumeration value="reliability diagram" />
            <xs:enumeration value="root mean square error" />
            <xs:enumeration value="sample size" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="metric">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="MetricConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="name" type="metricConfigName" />
            <xs:element name="probabilityThresholds" type="probabilityThreshold" minOccurs="0" maxOccurs="1"/>
            <xs:element name="valueThresholds" type="valueThreshold" minOccurs="0" maxOccurs="1" />
            <xs:element name="plotType" type="plotTypeSelection" minOccurs="0" />
            <xs:element name="templateResourceName" type="xs:anyURI" minOccurs="0" />
        </xs:sequence>

        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <xs:simpleType name="destinationType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="numeric" />
            <xs:enumeration value="graphic" />
            <xs:enumeration value="pairs" />
        </xs:restriction>
    </xs:simpleType>

    <!-- Possibilities for the graphical plotType element. -->
    <xs:simpleType name="plotTypeSelection">
        <xs:restriction base="xs:string">
            <xs:enumeration value="lead threshold" />
            <xs:enumeration value="threshold lead" />
            <xs:enumeration value="single valued pairs" />
        </xs:restriction>
    </xs:simpleType>
    
    <!-- Element to store options related to generating graphics. -->
    <xs:complexType name="graphicalType">

        <xs:sequence>
            <!-- Specifies the type of the plot.  Is required. -->
            <xs:element name="plotType" type="plotTypeSelection" minOccurs="0" maxOccurs="1"/>
            
            <!-- Specifies the override chart drawing parameters.  Will be processed as a String and passed to 
            charting tool so it can parse it.  Hence, the reason it is skipped. -->
            <xs:element name="config" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                    <xs:sequence>
                        <xs:any processContents="skip" namespace="##any" minOccurs="0" maxOccurs="unbounded" />
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>

        <!-- Image width. -->
        <xs:attribute name="width" type="xs:int" />
        
        <!-- Image height. -->
        <xs:attribute name="height" type="xs:int" />
        
        <!-- Location of the template file.  Every plot type has a default file.
        This allows for using a user customized file.  When searching for the 
        file it will begin by loading it as a system resource from the lib/conf
        directory and, if it is not found, then as a file on the file system. -->
        <xs:attribute name="template" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="destination">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="DestinationConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="path" type="xs:anyURI" />
            <!-- If output type is graphical (a chart)... -->
            <xs:element name="graphical" type="graphicalType" minOccurs="0" maxOccurs="1" />
        </xs:sequence>

        <xs:attribute name="type" type="destinationType" default="numeric" />
        <xs:attribute name="decimalFormat" type="xs:string" />
    </xs:complexType>

    <xs:simpleType name="timeAggregationFunction">
        <xs:restriction base="xs:string">
            <xs:enumeration value="sum" />
            <xs:enumeration value="avg" />
            <xs:enumeration value="max" />
            <xs:enumeration value="min" />
            <xs:enumeration value="median" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="duration">
        <xs:restriction base="xs:int"/>
    </xs:simpleType>
    <xs:simpleType name="durationUnit">
        <xs:restriction base="xs:string">
            <!-- Instantaneous only makes sense for describing existing, will
                 need to validate at application level that it is not used for
                 prescribing an aggregation. Also no more than 1 instant. -->
            <xs:enumeration value="instant" />
            <xs:enumeration value="minute" />
            <xs:enumeration value="hour" />
            <xs:enumeration value="day" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="timeZone">
        <xs:restriction base="xs:string">
            <xs:enumeration value="UTC"/>
            <xs:enumeration value="GMT"/>
            <xs:enumeration value="EDT"/>
            <xs:enumeration value="EST" />
            <xs:enumeration value="CST" />
            <xs:enumeration value="CDT" />
            <xs:enumeration value="MDT" />
            <xs:enumeration value="MST" />
            <xs:enumeration value="PDT" />
            <xs:enumeration value="PST" />
            <xs:enumeration value="AKDT" />
            <xs:enumeration value="AKST"/>
            <xs:enumeration value="HAST" />
            <xs:enumeration value="HADT" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="timeAggregationMode">
        <xs:restriction base="xs:string">
            <xs:enumeration value="back-to-back" />
            <xs:enumeration value="rolling" />
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="timeAggregation">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="TimeAggregationConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="function" type="timeAggregationFunction" default="avg" />
            <xs:element name="period" type="duration"/>
            <xs:element name="frequency" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="unit" type="durationUnit" default="hour" />
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" />
        <xs:attribute name="mode" type="timeAggregationMode" />
    </xs:complexType>

    <xs:simpleType name="spaceAggregationFunction">
        <xs:restriction base="xs:string">
            <xs:enumeration value="scale" />
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="spaceAggregation">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="SpaceAggregationConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="function" type="spaceAggregationFunction" />
            <xs:element name="parameters" type="xs:string" />
        </xs:sequence>

        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <!-- To support mapping of ad-hoc feature aliases to a feature name.
         As of 2017-09-19 the name can at least be a handbook5 lid, but maybe
         things will get more complex later. -->
    <xs:complexType name="featureAliasType">

        <!-- For class naming using xjc: -->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="FeatureAliasConfig" />
            </xs:appinfo>
        </xs:annotation>

        <!-- These may not really be identifiers, thus the use of the term
             name. For a project, it should identify the thing we are using
             for evaluation. An example:
             <name>DRRC2</name><alias>DRRC2HAF</alias><alias>DRRC2HSF</alias>-->
        <xs:sequence>
            <xs:element name="name" type="xs:string" />
            <xs:element name="alias" type="xs:string" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="pair">

        <!-- for class naming using xjc-->
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="PairConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="unit" type="xs:string" />
            <xs:element name="grouping" type="xs:string" minOccurs="0" maxOccurs="1" />
            <xs:element name="desiredTimeAggregation" type="timeAggregation" />
            <xs:element name="featureAlias" type="featureAliasType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="dragons">
        <xs:annotation>
            <xs:appinfo>
                <jaxb:class name="DragonsConfig" />
            </xs:appinfo>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="fullIngest" type="xs:boolean" minOccurs="0" maxOccurs="1" />
            <xs:element name="overwriteOldData" type="xs:boolean" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" />
    </xs:complexType>

    <xs:element name="project">
        <xs:complexType>

            <!-- for class naming using xjc-->
            <xs:annotation>
                <xs:appinfo>
                    <jaxb:class name="ProjectConfig" />
                </xs:appinfo>
            </xs:annotation>

            <xs:sequence>

                <xs:element name="inputs">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="left" type="datasource" />
                            <xs:element name="right" type="datasource" />
                            <xs:element name="baseline" type="datasource" minOccurs="0" maxOccurs="1" />
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="conditions" type="conditions" minOccurs="0" maxOccurs="1" />

                <xs:element name="pair" type="pair"/>

                <xs:element name="outputs">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="valueThresholds" type="valueThreshold" minOccurs="0" maxOccurs="1"/>
                            <xs:element name="probabilityThresholds" type="probabilityThreshold" minOccurs="0" maxOccurs="1"/>
                            <xs:element name="metric" type="metric" minOccurs="1" maxOccurs="unbounded"/>
                            <xs:element name="destination" type="destination" maxOccurs="unbounded"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="hereBeDragons" type="dragons" minOccurs="0" maxOccurs="1" />
            </xs:sequence>

            <xs:attribute name="label" type="xs:string" />
            <xs:attribute name="name" type="xs:string" default="unnamed project" />

        </xs:complexType>
    </xs:element>

</xs:schema>
